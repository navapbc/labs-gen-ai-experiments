# This file was generated by liblab | https://liblab.com/

from typing import Awaitable, Union
from .utils.to_async import to_async
from ..user_v1_internal_only import UserV1InternalOnlyService
from ...models import (
    UserTokenLogoutResponse,
    UserTokenRefreshResponse,
    UserGetResponse,
    UserOrganizationsResponse,
    UserSaveOpportunityResponse,
    UserSaveOpportunityRequest,
    UserSavedOpportunitiesResponse,
    UserSavedOpportunitiesRequest,
    UserDeleteSavedOpportunityResponse,
    UserSaveSearchResponse,
    UserSaveSearchRequest,
    UserSavedSearchesResponse,
    UserSavedSearchesRequest,
    UserUpdateSavedSearchResponse,
    UserUpdateSavedSearchRequest,
    UserDeleteSavedSearchResponse,
)


class UserV1InternalOnlyServiceAsync(UserV1InternalOnlyService):
    """
    Async Wrapper for UserV1InternalOnlyServiceAsync
    """

    def get_v1_users_login(self) -> Awaitable[any]:
        return to_async(super().get_v1_users_login)()

    def create_v1_users_token_logout(self) -> Awaitable[UserTokenLogoutResponse]:
        return to_async(super().create_v1_users_token_logout)()

    def create_v1_users_token_refresh(self) -> Awaitable[UserTokenRefreshResponse]:
        return to_async(super().create_v1_users_token_refresh)()

    def get_v1_users_by_user_id(self, user_id: str) -> Awaitable[UserGetResponse]:
        return to_async(super().get_v1_users_by_user_id)(user_id)

    def get_v1_users_by_user_id_organizations(
        self, user_id: str
    ) -> Awaitable[UserOrganizationsResponse]:
        return to_async(super().get_v1_users_by_user_id_organizations)(user_id)

    def create_v1_users_by_user_id_saved_opportunities(
        self, user_id: str, request_body: UserSaveOpportunityRequest = None
    ) -> Awaitable[UserSaveOpportunityResponse]:
        return to_async(super().create_v1_users_by_user_id_saved_opportunities)(
            user_id, request_body
        )

    def create_v1_users_by_user_id_saved_opportunities_list(
        self, user_id: str, request_body: UserSavedOpportunitiesRequest = None
    ) -> Awaitable[UserSavedOpportunitiesResponse]:
        return to_async(super().create_v1_users_by_user_id_saved_opportunities_list)(
            user_id, request_body
        )

    def delete_v1_users_by_user_id_saved_opportunities_by_opportunity_id(
        self, user_id: str, opportunity_id: int
    ) -> Awaitable[UserDeleteSavedOpportunityResponse]:
        return to_async(
            super().delete_v1_users_by_user_id_saved_opportunities_by_opportunity_id
        )(user_id, opportunity_id)

    def create_v1_users_by_user_id_saved_searches(
        self, user_id: str, request_body: UserSaveSearchRequest = None
    ) -> Awaitable[UserSaveSearchResponse]:
        return to_async(super().create_v1_users_by_user_id_saved_searches)(
            user_id, request_body
        )

    def create_v1_users_by_user_id_saved_searches_list(
        self, user_id: str, request_body: UserSavedSearchesRequest = None
    ) -> Awaitable[UserSavedSearchesResponse]:
        return to_async(super().create_v1_users_by_user_id_saved_searches_list)(
            user_id, request_body
        )

    def update_v1_users_by_user_id_saved_searches_by_saved_search_id(
        self,
        user_id: str,
        saved_search_id: str,
        request_body: UserUpdateSavedSearchRequest = None,
    ) -> Awaitable[UserUpdateSavedSearchResponse]:
        return to_async(
            super().update_v1_users_by_user_id_saved_searches_by_saved_search_id
        )(user_id, saved_search_id, request_body)

    def delete_v1_users_by_user_id_saved_searches_by_saved_search_id(
        self, user_id: str, saved_search_id: str
    ) -> Awaitable[UserDeleteSavedSearchResponse]:
        return to_async(
            super().delete_v1_users_by_user_id_saved_searches_by_saved_search_id
        )(user_id, saved_search_id)
