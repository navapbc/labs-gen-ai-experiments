# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.cast_models import cast_models
from ..models import (
    ErrorResponse,
    UserDeleteSavedOpportunityResponse,
    UserDeleteSavedSearchResponse,
    UserGetResponse,
    UserOrganizationsResponse,
    UserSavedOpportunitiesRequest,
    UserSavedOpportunitiesResponse,
    UserSavedSearchesRequest,
    UserSavedSearchesResponse,
    UserSaveOpportunityRequest,
    UserSaveOpportunityResponse,
    UserSaveSearchRequest,
    UserSaveSearchResponse,
    UserTokenLogoutResponse,
    UserTokenRefreshResponse,
    UserUpdateSavedSearchRequest,
    UserUpdateSavedSearchResponse,
)


class UserV1InternalOnlyService(BaseService):

    @cast_models
    def get_v1_users_login(self) -> any:
        """To use this endpoint, click [this link](/v1/users/login) which will redirect
        you to an OAuth provider where you can sign into an account.

        Do not try to use the execute option below as OpenAPI will not redirect your browser for you.

        The token you receive can then be set to the X-SGG-Token header for authenticating with endpoints.

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: any
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/login",
                [self.get_api_key()],
            )
            .serialize()
            .set_method("GET")
        )

        response, _, _ = self.send_request(serialized_request)
        return response

    @cast_models
    def create_v1_users_token_logout(self) -> UserTokenLogoutResponse:
        """create_v1_users_token_logout

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserTokenLogoutResponse
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/token/logout",
                [self.get_api_key()],
            )
            .add_error(401, ErrorResponse)
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)
        return UserTokenLogoutResponse._unmap(response)

    @cast_models
    def create_v1_users_token_refresh(self) -> UserTokenRefreshResponse:
        """create_v1_users_token_refresh

        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserTokenRefreshResponse
        """

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/token/refresh",
                [self.get_api_key()],
            )
            .add_error(401, ErrorResponse)
            .serialize()
            .set_method("POST")
        )

        response, status, _ = self.send_request(serialized_request)
        return UserTokenRefreshResponse._unmap(response)

    @cast_models
    def get_v1_users_by_user_id(self, user_id: str) -> UserGetResponse:
        """get_v1_users_by_user_id

        :param user_id: user_id
        :type user_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserGetResponse
        """

        Validator(str).validate(user_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_error(401, ErrorResponse)
            .add_error(404, ErrorResponse)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return UserGetResponse._unmap(response)

    @cast_models
    def get_v1_users_by_user_id_organizations(
        self, user_id: str
    ) -> UserOrganizationsResponse:
        """get_v1_users_by_user_id_organizations

        :param user_id: user_id
        :type user_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserOrganizationsResponse
        """

        Validator(str).validate(user_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/organizations",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return UserOrganizationsResponse._unmap(response)

    @cast_models
    def create_v1_users_by_user_id_saved_opportunities(
        self, user_id: str, request_body: UserSaveOpportunityRequest = None
    ) -> UserSaveOpportunityResponse:
        """create_v1_users_by_user_id_saved_opportunities

        :param request_body: The request body., defaults to None
        :type request_body: UserSaveOpportunityRequest, optional
        :param user_id: user_id
        :type user_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserSaveOpportunityResponse
        """

        Validator(UserSaveOpportunityRequest).is_optional().validate(request_body)
        Validator(str).validate(user_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/saved-opportunities",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, status, _ = self.send_request(serialized_request)
        return UserSaveOpportunityResponse._unmap(response)

    @cast_models
    def create_v1_users_by_user_id_saved_opportunities_list(
        self, user_id: str, request_body: UserSavedOpportunitiesRequest = None
    ) -> UserSavedOpportunitiesResponse:
        """create_v1_users_by_user_id_saved_opportunities_list

        :param request_body: The request body., defaults to None
        :type request_body: UserSavedOpportunitiesRequest, optional
        :param user_id: user_id
        :type user_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserSavedOpportunitiesResponse
        """

        Validator(UserSavedOpportunitiesRequest).is_optional().validate(request_body)
        Validator(str).validate(user_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/saved-opportunities/list",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, status, _ = self.send_request(serialized_request)
        return UserSavedOpportunitiesResponse._unmap(response)

    @cast_models
    def delete_v1_users_by_user_id_saved_opportunities_by_opportunity_id(
        self, user_id: str, opportunity_id: int
    ) -> UserDeleteSavedOpportunityResponse:
        """delete_v1_users_by_user_id_saved_opportunities_by_opportunity_id

        :param user_id: user_id
        :type user_id: str
        :param opportunity_id: opportunity_id
        :type opportunity_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserDeleteSavedOpportunityResponse
        """

        Validator(str).validate(user_id)
        Validator(int).validate(opportunity_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/saved-opportunities/{{opportunity_id}}",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_path("opportunity_id", opportunity_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .serialize()
            .set_method("DELETE")
        )

        response, status, _ = self.send_request(serialized_request)
        return UserDeleteSavedOpportunityResponse._unmap(response)

    @cast_models
    def create_v1_users_by_user_id_saved_searches(
        self, user_id: str, request_body: UserSaveSearchRequest = None
    ) -> UserSaveSearchResponse:
        """create_v1_users_by_user_id_saved_searches

        :param request_body: The request body., defaults to None
        :type request_body: UserSaveSearchRequest, optional
        :param user_id: user_id
        :type user_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserSaveSearchResponse
        """

        Validator(UserSaveSearchRequest).is_optional().validate(request_body)
        Validator(str).validate(user_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/saved-searches",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, status, _ = self.send_request(serialized_request)
        return UserSaveSearchResponse._unmap(response)

    @cast_models
    def create_v1_users_by_user_id_saved_searches_list(
        self, user_id: str, request_body: UserSavedSearchesRequest = None
    ) -> UserSavedSearchesResponse:
        """create_v1_users_by_user_id_saved_searches_list

        :param request_body: The request body., defaults to None
        :type request_body: UserSavedSearchesRequest, optional
        :param user_id: user_id
        :type user_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserSavedSearchesResponse
        """

        Validator(UserSavedSearchesRequest).is_optional().validate(request_body)
        Validator(str).validate(user_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/saved-searches/list",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, status, _ = self.send_request(serialized_request)
        return UserSavedSearchesResponse._unmap(response)

    @cast_models
    def update_v1_users_by_user_id_saved_searches_by_saved_search_id(
        self,
        user_id: str,
        saved_search_id: str,
        request_body: UserUpdateSavedSearchRequest = None,
    ) -> UserUpdateSavedSearchResponse:
        """update_v1_users_by_user_id_saved_searches_by_saved_search_id

        :param request_body: The request body., defaults to None
        :type request_body: UserUpdateSavedSearchRequest, optional
        :param user_id: user_id
        :type user_id: str
        :param saved_search_id: saved_search_id
        :type saved_search_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserUpdateSavedSearchResponse
        """

        Validator(UserUpdateSavedSearchRequest).is_optional().validate(request_body)
        Validator(str).validate(user_id)
        Validator(str).validate(saved_search_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/saved-searches/{{saved_search_id}}",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_path("saved_search_id", saved_search_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("PUT")
            .set_body(request_body)
        )

        response, status, _ = self.send_request(serialized_request)
        return UserUpdateSavedSearchResponse._unmap(response)

    @cast_models
    def delete_v1_users_by_user_id_saved_searches_by_saved_search_id(
        self, user_id: str, saved_search_id: str
    ) -> UserDeleteSavedSearchResponse:
        """delete_v1_users_by_user_id_saved_searches_by_saved_search_id

        :param user_id: user_id
        :type user_id: str
        :param saved_search_id: saved_search_id
        :type saved_search_id: str
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: UserDeleteSavedSearchResponse
        """

        Validator(str).validate(user_id)
        Validator(str).validate(saved_search_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/users/{{user_id}}/saved-searches/{{saved_search_id}}",
                [self.get_api_key()],
            )
            .add_path("user_id", user_id)
            .add_path("saved_search_id", saved_search_id)
            .add_error(401, ErrorResponse)
            .add_error(403, ErrorResponse)
            .add_error(404, ErrorResponse)
            .serialize()
            .set_method("DELETE")
        )

        response, status, _ = self.send_request(serialized_request)
        return UserDeleteSavedSearchResponse._unmap(response)
