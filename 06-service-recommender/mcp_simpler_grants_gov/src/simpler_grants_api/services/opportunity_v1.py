# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.transport.api_error import ApiError
from ..net.environment.environment import Environment
from ..models.utils.cast_models import cast_models
from ..models import (
    ErrorResponse,
    OpportunityGetResponseV1,
    OpportunitySearchRequestV1,
    OpportunitySearchResponseV1,
)


class OpportunityV1Service(BaseService):

    @cast_models
    def create_v1_opportunities_search(
        self, request_body: OpportunitySearchRequestV1 = None
    ) -> Union[OpportunitySearchResponseV1, bytes]:
        """__ALPHA VERSION__

        This endpoint in its current form is primarily for testing and feedback.

        Features in this endpoint are still under heavy development, and subject to change. Not for production use.

        See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details.

        :param request_body: The request body., defaults to None
        :type request_body: OpportunitySearchRequestV1, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: Union[OpportunitySearchResponseV1, bytes]
        """

        Validator(OpportunitySearchRequestV1).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/opportunities/search",
                [self.get_api_key()],
            )
            .add_error(401, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, status, content = self.send_request(serialized_request)
        if content == "application/json":
            return OpportunitySearchResponseV1._unmap(response)
        if content == "application/octet-stream":
            return response
        raise ApiError("Error on deserializing the response.", status, response)

    @cast_models
    def get_v1_opportunities_by_opportunity_id(
        self, opportunity_id: int
    ) -> OpportunityGetResponseV1:
        """__ALPHA VERSION__

        This endpoint in its current form is primarily for testing and feedback.

        Features in this endpoint are still under heavy development, and subject to change. Not for production use.

        See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details.

        :param opportunity_id: opportunity_id
        :type opportunity_id: int
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: OpportunityGetResponseV1
        """

        Validator(int).validate(opportunity_id)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/opportunities/{{opportunity_id}}",
                [self.get_api_key()],
            )
            .add_path("opportunity_id", opportunity_id)
            .add_error(401, ErrorResponse)
            .add_error(404, ErrorResponse)
            .serialize()
            .set_method("GET")
        )

        response, status, _ = self.send_request(serialized_request)
        return OpportunityGetResponseV1._unmap(response)
