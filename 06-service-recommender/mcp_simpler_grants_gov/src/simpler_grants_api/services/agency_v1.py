# This file was generated by liblab | https://liblab.com/

from typing import Union
from .utils.validator import Validator
from .utils.base_service import BaseService
from ..net.transport.serializer import Serializer
from ..net.environment.environment import Environment
from ..models.utils.cast_models import cast_models
from ..models import (
    AgencyListRequest,
    AgencyListResponse,
    AgencySearchRequest,
    AgencySearchResponseV1,
    ErrorResponse,
)


class AgencyV1Service(BaseService):

    @cast_models
    def create_v1_agencies(
        self, request_body: AgencyListRequest = None
    ) -> AgencyListResponse:
        """create_v1_agencies

        :param request_body: The request body., defaults to None
        :type request_body: AgencyListRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: AgencyListResponse
        """

        Validator(AgencyListRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/agencies",
                [self.get_api_key()],
            )
            .add_error(401, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, status, _ = self.send_request(serialized_request)
        return AgencyListResponse._unmap(response)

    @cast_models
    def create_v1_agencies_search(
        self, request_body: AgencySearchRequest = None
    ) -> AgencySearchResponseV1:
        """create_v1_agencies_search

        :param request_body: The request body., defaults to None
        :type request_body: AgencySearchRequest, optional
        ...
        :raises RequestError: Raised when a request fails, with optional HTTP status code and details.
        ...
        :return: The parsed response data.
        :rtype: AgencySearchResponseV1
        """

        Validator(AgencySearchRequest).is_optional().validate(request_body)

        serialized_request = (
            Serializer(
                f"{self.base_url or Environment.DEFAULT.url}/v1/agencies/search",
                [self.get_api_key()],
            )
            .add_error(401, ErrorResponse)
            .add_error(422, ErrorResponse)
            .serialize()
            .set_method("POST")
            .set_body(request_body)
        )

        response, status, _ = self.send_request(serialized_request)
        return AgencySearchResponseV1._unmap(response)
