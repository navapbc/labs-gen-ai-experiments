# This file was generated by liblab | https://liblab.com/

from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL


class ApplicantTypes(Enum):
    """An enumeration representing different categories.

    :cvar STATEGOVERNMENTS: "state_governments"
    :vartype STATEGOVERNMENTS: str
    :cvar COUNTYGOVERNMENTS: "county_governments"
    :vartype COUNTYGOVERNMENTS: str
    :cvar CITYORTOWNSHIPGOVERNMENTS: "city_or_township_governments"
    :vartype CITYORTOWNSHIPGOVERNMENTS: str
    :cvar SPECIALDISTRICTGOVERNMENTS: "special_district_governments"
    :vartype SPECIALDISTRICTGOVERNMENTS: str
    :cvar INDEPENDENTSCHOOLDISTRICTS: "independent_school_districts"
    :vartype INDEPENDENTSCHOOLDISTRICTS: str
    :cvar PUBLICANDSTATEINSTITUTIONSOFHIGHEREDUCATION: "public_and_state_institutions_of_higher_education"
    :vartype PUBLICANDSTATEINSTITUTIONSOFHIGHEREDUCATION: str
    :cvar PRIVATEINSTITUTIONSOFHIGHEREDUCATION: "private_institutions_of_higher_education"
    :vartype PRIVATEINSTITUTIONSOFHIGHEREDUCATION: str
    :cvar FEDERALLYRECOGNIZEDNATIVEAMERICANTRIBALGOVERNMENTS: "federally_recognized_native_american_tribal_governments"
    :vartype FEDERALLYRECOGNIZEDNATIVEAMERICANTRIBALGOVERNMENTS: str
    :cvar OTHERNATIVEAMERICANTRIBALORGANIZATIONS: "other_native_american_tribal_organizations"
    :vartype OTHERNATIVEAMERICANTRIBALORGANIZATIONS: str
    :cvar PUBLICANDINDIANHOUSINGAUTHORITIES: "public_and_indian_housing_authorities"
    :vartype PUBLICANDINDIANHOUSINGAUTHORITIES: str
    :cvar NONPROFITSNONHIGHEREDUCATIONWITH501C3: "nonprofits_non_higher_education_with_501c3"
    :vartype NONPROFITSNONHIGHEREDUCATIONWITH501C3: str
    :cvar NONPROFITSNONHIGHEREDUCATIONWITHOUT501C3: "nonprofits_non_higher_education_without_501c3"
    :vartype NONPROFITSNONHIGHEREDUCATIONWITHOUT501C3: str
    :cvar INDIVIDUALS: "individuals"
    :vartype INDIVIDUALS: str
    :cvar FORPROFITORGANIZATIONSOTHERTHANSMALLBUSINESSES: "for_profit_organizations_other_than_small_businesses"
    :vartype FORPROFITORGANIZATIONSOTHERTHANSMALLBUSINESSES: str
    :cvar SMALLBUSINESSES: "small_businesses"
    :vartype SMALLBUSINESSES: str
    :cvar OTHER: "other"
    :vartype OTHER: str
    :cvar UNRESTRICTED: "unrestricted"
    :vartype UNRESTRICTED: str
    """

    STATEGOVERNMENTS = "state_governments"
    COUNTYGOVERNMENTS = "county_governments"
    CITYORTOWNSHIPGOVERNMENTS = "city_or_township_governments"
    SPECIALDISTRICTGOVERNMENTS = "special_district_governments"
    INDEPENDENTSCHOOLDISTRICTS = "independent_school_districts"
    PUBLICANDSTATEINSTITUTIONSOFHIGHEREDUCATION = (
        "public_and_state_institutions_of_higher_education"
    )
    PRIVATEINSTITUTIONSOFHIGHEREDUCATION = "private_institutions_of_higher_education"
    FEDERALLYRECOGNIZEDNATIVEAMERICANTRIBALGOVERNMENTS = (
        "federally_recognized_native_american_tribal_governments"
    )
    OTHERNATIVEAMERICANTRIBALORGANIZATIONS = (
        "other_native_american_tribal_organizations"
    )
    PUBLICANDINDIANHOUSINGAUTHORITIES = "public_and_indian_housing_authorities"
    NONPROFITSNONHIGHEREDUCATIONWITH501C3 = "nonprofits_non_higher_education_with_501c3"
    NONPROFITSNONHIGHEREDUCATIONWITHOUT501C3 = (
        "nonprofits_non_higher_education_without_501c3"
    )
    INDIVIDUALS = "individuals"
    FORPROFITORGANIZATIONSOTHERTHANSMALLBUSINESSES = (
        "for_profit_organizations_other_than_small_businesses"
    )
    SMALLBUSINESSES = "small_businesses"
    OTHER = "other"
    UNRESTRICTED = "unrestricted"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ApplicantTypes._member_map_.values()))


class FundingCategories(Enum):
    """An enumeration representing different categories.

    :cvar RECOVERYACT: "recovery_act"
    :vartype RECOVERYACT: str
    :cvar AGRICULTURE: "agriculture"
    :vartype AGRICULTURE: str
    :cvar ARTS: "arts"
    :vartype ARTS: str
    :cvar BUSINESSANDCOMMERCE: "business_and_commerce"
    :vartype BUSINESSANDCOMMERCE: str
    :cvar COMMUNITYDEVELOPMENT: "community_development"
    :vartype COMMUNITYDEVELOPMENT: str
    :cvar CONSUMERPROTECTION: "consumer_protection"
    :vartype CONSUMERPROTECTION: str
    :cvar DISASTERPREVENTIONANDRELIEF: "disaster_prevention_and_relief"
    :vartype DISASTERPREVENTIONANDRELIEF: str
    :cvar EDUCATION: "education"
    :vartype EDUCATION: str
    :cvar EMPLOYMENTLABORANDTRAINING: "employment_labor_and_training"
    :vartype EMPLOYMENTLABORANDTRAINING: str
    :cvar ENERGY: "energy"
    :vartype ENERGY: str
    :cvar ENVIRONMENT: "environment"
    :vartype ENVIRONMENT: str
    :cvar FOODANDNUTRITION: "food_and_nutrition"
    :vartype FOODANDNUTRITION: str
    :cvar HEALTH: "health"
    :vartype HEALTH: str
    :cvar HOUSING: "housing"
    :vartype HOUSING: str
    :cvar HUMANITIES: "humanities"
    :vartype HUMANITIES: str
    :cvar INFRASTRUCTUREINVESTMENTANDJOBSACT: "infrastructure_investment_and_jobs_act"
    :vartype INFRASTRUCTUREINVESTMENTANDJOBSACT: str
    :cvar INFORMATIONANDSTATISTICS: "information_and_statistics"
    :vartype INFORMATIONANDSTATISTICS: str
    :cvar INCOMESECURITYANDSOCIALSERVICES: "income_security_and_social_services"
    :vartype INCOMESECURITYANDSOCIALSERVICES: str
    :cvar LAWJUSTICEANDLEGALSERVICES: "law_justice_and_legal_services"
    :vartype LAWJUSTICEANDLEGALSERVICES: str
    :cvar NATURALRESOURCES: "natural_resources"
    :vartype NATURALRESOURCES: str
    :cvar OPPORTUNITYZONEBENEFITS: "opportunity_zone_benefits"
    :vartype OPPORTUNITYZONEBENEFITS: str
    :cvar REGIONALDEVELOPMENT: "regional_development"
    :vartype REGIONALDEVELOPMENT: str
    :cvar SCIENCETECHNOLOGYANDOTHERRESEARCHANDDEVELOPMENT: "science_technology_and_other_research_and_development"
    :vartype SCIENCETECHNOLOGYANDOTHERRESEARCHANDDEVELOPMENT: str
    :cvar TRANSPORTATION: "transportation"
    :vartype TRANSPORTATION: str
    :cvar AFFORDABLECAREACT: "affordable_care_act"
    :vartype AFFORDABLECAREACT: str
    :cvar OTHER: "other"
    :vartype OTHER: str
    """

    RECOVERYACT = "recovery_act"
    AGRICULTURE = "agriculture"
    ARTS = "arts"
    BUSINESSANDCOMMERCE = "business_and_commerce"
    COMMUNITYDEVELOPMENT = "community_development"
    CONSUMERPROTECTION = "consumer_protection"
    DISASTERPREVENTIONANDRELIEF = "disaster_prevention_and_relief"
    EDUCATION = "education"
    EMPLOYMENTLABORANDTRAINING = "employment_labor_and_training"
    ENERGY = "energy"
    ENVIRONMENT = "environment"
    FOODANDNUTRITION = "food_and_nutrition"
    HEALTH = "health"
    HOUSING = "housing"
    HUMANITIES = "humanities"
    INFRASTRUCTUREINVESTMENTANDJOBSACT = "infrastructure_investment_and_jobs_act"
    INFORMATIONANDSTATISTICS = "information_and_statistics"
    INCOMESECURITYANDSOCIALSERVICES = "income_security_and_social_services"
    LAWJUSTICEANDLEGALSERVICES = "law_justice_and_legal_services"
    NATURALRESOURCES = "natural_resources"
    OPPORTUNITYZONEBENEFITS = "opportunity_zone_benefits"
    REGIONALDEVELOPMENT = "regional_development"
    SCIENCETECHNOLOGYANDOTHERRESEARCHANDDEVELOPMENT = (
        "science_technology_and_other_research_and_development"
    )
    TRANSPORTATION = "transportation"
    AFFORDABLECAREACT = "affordable_care_act"
    OTHER = "other"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, FundingCategories._member_map_.values()))


class FundingInstruments(Enum):
    """An enumeration representing different categories.

    :cvar COOPERATIVEAGREEMENT: "cooperative_agreement"
    :vartype COOPERATIVEAGREEMENT: str
    :cvar GRANT: "grant"
    :vartype GRANT: str
    :cvar PROCUREMENTCONTRACT: "procurement_contract"
    :vartype PROCUREMENTCONTRACT: str
    :cvar OTHER: "other"
    :vartype OTHER: str
    """

    COOPERATIVEAGREEMENT = "cooperative_agreement"
    GRANT = "grant"
    PROCUREMENTCONTRACT = "procurement_contract"
    OTHER = "other"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, FundingInstruments._member_map_.values()))


@JsonMap({})
class OpportunitySummaryV1(BaseModel):
    """OpportunitySummaryV1

    :param additional_info_url: A URL to a website that can provide additional information about the opportunity, defaults to None
    :type additional_info_url: str, optional
    :param additional_info_url_description: The text to display for the additional_info_url link, defaults to None
    :type additional_info_url_description: str, optional
    :param agency_contact_description: Information regarding contacting the agency who owns the opportunity, defaults to None
    :type agency_contact_description: str, optional
    :param agency_email_address: The contact email of the agency who owns the opportunity, defaults to None
    :type agency_email_address: str, optional
    :param agency_email_address_description: The text for the link to the agency email address, defaults to None
    :type agency_email_address_description: str, optional
    :param applicant_eligibility_description: Additional information about the types of applicants that are eligible, defaults to None
    :type applicant_eligibility_description: str, optional
    :param applicant_types: applicant_types, defaults to None
    :type applicant_types: List[ApplicantTypes], optional
    :param archive_date: When the opportunity will be archived, defaults to None
    :type archive_date: str, optional
    :param award_ceiling: The maximum amount an opportunity would award, defaults to None
    :type award_ceiling: int, optional
    :param award_floor: The minimum amount an opportunity would award, defaults to None
    :type award_floor: int, optional
    :param close_date: The date that the opportunity will close - only set if is_forecast=False, defaults to None
    :type close_date: str, optional
    :param close_date_description: Optional details regarding the close date, defaults to None
    :type close_date_description: str, optional
    :param created_at: When the opportunity summary was created, defaults to None
    :type created_at: str, optional
    :param estimated_total_program_funding: The total program funding of the opportunity in US Dollars, defaults to None
    :type estimated_total_program_funding: int, optional
    :param expected_number_of_awards: The number of awards the opportunity is expected to award, defaults to None
    :type expected_number_of_awards: int, optional
    :param fiscal_year: Forecasted opportunity only. The fiscal year the project is expected to be funded and launched, defaults to None
    :type fiscal_year: int, optional
    :param forecasted_award_date: Forecasted opportunity only. The date the grantor plans to award the opportunity., defaults to None
    :type forecasted_award_date: str, optional
    :param forecasted_close_date: Forecasted opportunity only. The date the opportunity is expected to be close once posted., defaults to None
    :type forecasted_close_date: str, optional
    :param forecasted_close_date_description: Forecasted opportunity only. Optional details regarding the forecasted closed date., defaults to None
    :type forecasted_close_date_description: str, optional
    :param forecasted_post_date: Forecasted opportunity only. The date the opportunity is expected to be posted, and transition out of being a forecast, defaults to None
    :type forecasted_post_date: str, optional
    :param forecasted_project_start_date: Forecasted opportunity only. The date the grantor expects the award recipient should start their project, defaults to None
    :type forecasted_project_start_date: str, optional
    :param funding_categories: funding_categories, defaults to None
    :type funding_categories: List[FundingCategories], optional
    :param funding_category_description: Additional information about the funding category, defaults to None
    :type funding_category_description: str, optional
    :param funding_instruments: funding_instruments, defaults to None
    :type funding_instruments: List[FundingInstruments], optional
    :param is_cost_sharing: Whether or not the opportunity has a cost sharing/matching requirement, defaults to None
    :type is_cost_sharing: bool, optional
    :param is_forecast: Whether the opportunity is forecasted, that is, the information is only an estimate and not yet official, defaults to None
    :type is_forecast: bool, optional
    :param post_date: The date the opportunity was posted, defaults to None
    :type post_date: str, optional
    :param summary_description: The summary of the opportunity, defaults to None
    :type summary_description: str, optional
    :param updated_at: When the opportunity summary was last updated, defaults to None
    :type updated_at: str, optional
    :param version_number: The version number of the opportunity summary, defaults to None
    :type version_number: int, optional
    """

    def __init__(
        self,
        additional_info_url: str = SENTINEL,
        additional_info_url_description: str = SENTINEL,
        agency_contact_description: str = SENTINEL,
        agency_email_address: str = SENTINEL,
        agency_email_address_description: str = SENTINEL,
        applicant_eligibility_description: str = SENTINEL,
        applicant_types: List[ApplicantTypes] = SENTINEL,
        archive_date: str = SENTINEL,
        award_ceiling: int = SENTINEL,
        award_floor: int = SENTINEL,
        close_date: str = SENTINEL,
        close_date_description: str = SENTINEL,
        created_at: str = SENTINEL,
        estimated_total_program_funding: int = SENTINEL,
        expected_number_of_awards: int = SENTINEL,
        fiscal_year: int = SENTINEL,
        forecasted_award_date: str = SENTINEL,
        forecasted_close_date: str = SENTINEL,
        forecasted_close_date_description: str = SENTINEL,
        forecasted_post_date: str = SENTINEL,
        forecasted_project_start_date: str = SENTINEL,
        funding_categories: List[FundingCategories] = SENTINEL,
        funding_category_description: str = SENTINEL,
        funding_instruments: List[FundingInstruments] = SENTINEL,
        is_cost_sharing: bool = SENTINEL,
        is_forecast: bool = SENTINEL,
        post_date: str = SENTINEL,
        summary_description: str = SENTINEL,
        updated_at: str = SENTINEL,
        version_number: int = SENTINEL,
        **kwargs
    ):
        """OpportunitySummaryV1

        :param additional_info_url: A URL to a website that can provide additional information about the opportunity, defaults to None
        :type additional_info_url: str, optional
        :param additional_info_url_description: The text to display for the additional_info_url link, defaults to None
        :type additional_info_url_description: str, optional
        :param agency_contact_description: Information regarding contacting the agency who owns the opportunity, defaults to None
        :type agency_contact_description: str, optional
        :param agency_email_address: The contact email of the agency who owns the opportunity, defaults to None
        :type agency_email_address: str, optional
        :param agency_email_address_description: The text for the link to the agency email address, defaults to None
        :type agency_email_address_description: str, optional
        :param applicant_eligibility_description: Additional information about the types of applicants that are eligible, defaults to None
        :type applicant_eligibility_description: str, optional
        :param applicant_types: applicant_types, defaults to None
        :type applicant_types: List[ApplicantTypes], optional
        :param archive_date: When the opportunity will be archived, defaults to None
        :type archive_date: str, optional
        :param award_ceiling: The maximum amount an opportunity would award, defaults to None
        :type award_ceiling: int, optional
        :param award_floor: The minimum amount an opportunity would award, defaults to None
        :type award_floor: int, optional
        :param close_date: The date that the opportunity will close - only set if is_forecast=False, defaults to None
        :type close_date: str, optional
        :param close_date_description: Optional details regarding the close date, defaults to None
        :type close_date_description: str, optional
        :param created_at: When the opportunity summary was created, defaults to None
        :type created_at: str, optional
        :param estimated_total_program_funding: The total program funding of the opportunity in US Dollars, defaults to None
        :type estimated_total_program_funding: int, optional
        :param expected_number_of_awards: The number of awards the opportunity is expected to award, defaults to None
        :type expected_number_of_awards: int, optional
        :param fiscal_year: Forecasted opportunity only. The fiscal year the project is expected to be funded and launched, defaults to None
        :type fiscal_year: int, optional
        :param forecasted_award_date: Forecasted opportunity only. The date the grantor plans to award the opportunity., defaults to None
        :type forecasted_award_date: str, optional
        :param forecasted_close_date: Forecasted opportunity only. The date the opportunity is expected to be close once posted., defaults to None
        :type forecasted_close_date: str, optional
        :param forecasted_close_date_description: Forecasted opportunity only. Optional details regarding the forecasted closed date., defaults to None
        :type forecasted_close_date_description: str, optional
        :param forecasted_post_date: Forecasted opportunity only. The date the opportunity is expected to be posted, and transition out of being a forecast, defaults to None
        :type forecasted_post_date: str, optional
        :param forecasted_project_start_date: Forecasted opportunity only. The date the grantor expects the award recipient should start their project, defaults to None
        :type forecasted_project_start_date: str, optional
        :param funding_categories: funding_categories, defaults to None
        :type funding_categories: List[FundingCategories], optional
        :param funding_category_description: Additional information about the funding category, defaults to None
        :type funding_category_description: str, optional
        :param funding_instruments: funding_instruments, defaults to None
        :type funding_instruments: List[FundingInstruments], optional
        :param is_cost_sharing: Whether or not the opportunity has a cost sharing/matching requirement, defaults to None
        :type is_cost_sharing: bool, optional
        :param is_forecast: Whether the opportunity is forecasted, that is, the information is only an estimate and not yet official, defaults to None
        :type is_forecast: bool, optional
        :param post_date: The date the opportunity was posted, defaults to None
        :type post_date: str, optional
        :param summary_description: The summary of the opportunity, defaults to None
        :type summary_description: str, optional
        :param updated_at: When the opportunity summary was last updated, defaults to None
        :type updated_at: str, optional
        :param version_number: The version number of the opportunity summary, defaults to None
        :type version_number: int, optional
        """
        if additional_info_url is not SENTINEL:
            self.additional_info_url = additional_info_url
        if additional_info_url_description is not SENTINEL:
            self.additional_info_url_description = additional_info_url_description
        if agency_contact_description is not SENTINEL:
            self.agency_contact_description = agency_contact_description
        if agency_email_address is not SENTINEL:
            self.agency_email_address = agency_email_address
        if agency_email_address_description is not SENTINEL:
            self.agency_email_address_description = agency_email_address_description
        if applicant_eligibility_description is not SENTINEL:
            self.applicant_eligibility_description = applicant_eligibility_description
        if applicant_types is not SENTINEL:
            self.applicant_types = self._define_list(applicant_types, ApplicantTypes)
        if archive_date is not SENTINEL:
            self.archive_date = archive_date
        if award_ceiling is not SENTINEL:
            self.award_ceiling = award_ceiling
        if award_floor is not SENTINEL:
            self.award_floor = award_floor
        if close_date is not SENTINEL:
            self.close_date = close_date
        if close_date_description is not SENTINEL:
            self.close_date_description = close_date_description
        if created_at is not SENTINEL:
            self.created_at = created_at
        if estimated_total_program_funding is not SENTINEL:
            self.estimated_total_program_funding = estimated_total_program_funding
        if expected_number_of_awards is not SENTINEL:
            self.expected_number_of_awards = expected_number_of_awards
        if fiscal_year is not SENTINEL:
            self.fiscal_year = fiscal_year
        if forecasted_award_date is not SENTINEL:
            self.forecasted_award_date = forecasted_award_date
        if forecasted_close_date is not SENTINEL:
            self.forecasted_close_date = forecasted_close_date
        if forecasted_close_date_description is not SENTINEL:
            self.forecasted_close_date_description = forecasted_close_date_description
        if forecasted_post_date is not SENTINEL:
            self.forecasted_post_date = forecasted_post_date
        if forecasted_project_start_date is not SENTINEL:
            self.forecasted_project_start_date = forecasted_project_start_date
        if funding_categories is not SENTINEL:
            self.funding_categories = self._define_list(
                funding_categories, FundingCategories
            )
        if funding_category_description is not SENTINEL:
            self.funding_category_description = funding_category_description
        if funding_instruments is not SENTINEL:
            self.funding_instruments = self._define_list(
                funding_instruments, FundingInstruments
            )
        if is_cost_sharing is not SENTINEL:
            self.is_cost_sharing = is_cost_sharing
        if is_forecast is not SENTINEL:
            self.is_forecast = is_forecast
        if post_date is not SENTINEL:
            self.post_date = post_date
        if summary_description is not SENTINEL:
            self.summary_description = summary_description
        if updated_at is not SENTINEL:
            self.updated_at = updated_at
        if version_number is not SENTINEL:
            self.version_number = version_number
        self._kwargs = kwargs
