# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from typing import List
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL
from .competition_form_alpha import CompetitionFormAlpha
from .competition_instruction_alpha import CompetitionInstructionAlpha
from .opportunity_assistance_listing_v1 import OpportunityAssistanceListingV1


class OpenToApplicants(Enum):
    """An enumeration representing different categories.

    :cvar INDIVIDUAL: "individual"
    :vartype INDIVIDUAL: str
    :cvar ORGANIZATION: "organization"
    :vartype ORGANIZATION: str
    """

    INDIVIDUAL = "individual"
    ORGANIZATION = "organization"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, OpenToApplicants._member_map_.values()))


@JsonMap({})
class CompetitionAlpha(BaseModel):
    """CompetitionAlpha

    :param closing_date: The closing date of the competition, the last day applications are accepted, defaults to None
    :type closing_date: str, optional
    :param competition_forms: competition_forms, defaults to None
    :type competition_forms: List[CompetitionFormAlpha], optional
    :param competition_id: The competition ID, defaults to None
    :type competition_id: str, optional
    :param competition_instructions: List of instruction files associated with this competition, defaults to None
    :type competition_instructions: List[CompetitionInstructionAlpha], optional
    :param competition_title: The title of the competition, defaults to None
    :type competition_title: str, optional
    :param contact_info: Contact info getting assistance with the competition, defaults to None
    :type contact_info: str, optional
    :param is_open: Whether the competition is open and accepting applications, defaults to None
    :type is_open: bool, optional
    :param open_to_applicants: open_to_applicants, defaults to None
    :type open_to_applicants: List[OpenToApplicants], optional
    :param opening_date: The opening date of the competition, the first day applications are accepted, defaults to None
    :type opening_date: str, optional
    :param opportunity_assistance_listing: opportunity_assistance_listing, defaults to None
    :type opportunity_assistance_listing: OpportunityAssistanceListingV1, optional
    :param opportunity_id: The opportunity ID that the competition is associated with, defaults to None
    :type opportunity_id: int, optional
    """

    def __init__(
        self,
        closing_date: str = SENTINEL,
        competition_forms: List[CompetitionFormAlpha] = SENTINEL,
        competition_id: str = SENTINEL,
        competition_instructions: List[CompetitionInstructionAlpha] = SENTINEL,
        competition_title: str = SENTINEL,
        contact_info: str = SENTINEL,
        is_open: bool = SENTINEL,
        open_to_applicants: List[OpenToApplicants] = SENTINEL,
        opening_date: str = SENTINEL,
        opportunity_assistance_listing: OpportunityAssistanceListingV1 = SENTINEL,
        opportunity_id: int = SENTINEL,
        **kwargs,
    ):
        """CompetitionAlpha

        :param closing_date: The closing date of the competition, the last day applications are accepted, defaults to None
        :type closing_date: str, optional
        :param competition_forms: competition_forms, defaults to None
        :type competition_forms: List[CompetitionFormAlpha], optional
        :param competition_id: The competition ID, defaults to None
        :type competition_id: str, optional
        :param competition_instructions: List of instruction files associated with this competition, defaults to None
        :type competition_instructions: List[CompetitionInstructionAlpha], optional
        :param competition_title: The title of the competition, defaults to None
        :type competition_title: str, optional
        :param contact_info: Contact info getting assistance with the competition, defaults to None
        :type contact_info: str, optional
        :param is_open: Whether the competition is open and accepting applications, defaults to None
        :type is_open: bool, optional
        :param open_to_applicants: open_to_applicants, defaults to None
        :type open_to_applicants: List[OpenToApplicants], optional
        :param opening_date: The opening date of the competition, the first day applications are accepted, defaults to None
        :type opening_date: str, optional
        :param opportunity_assistance_listing: opportunity_assistance_listing, defaults to None
        :type opportunity_assistance_listing: OpportunityAssistanceListingV1, optional
        :param opportunity_id: The opportunity ID that the competition is associated with, defaults to None
        :type opportunity_id: int, optional
        """
        if closing_date is not SENTINEL:
            self.closing_date = closing_date
        if competition_forms is not SENTINEL:
            self.competition_forms = self._define_list(
                competition_forms, CompetitionFormAlpha
            )
        if competition_id is not SENTINEL:
            self.competition_id = competition_id
        if competition_instructions is not SENTINEL:
            self.competition_instructions = self._define_list(
                competition_instructions, CompetitionInstructionAlpha
            )
        if competition_title is not SENTINEL:
            self.competition_title = competition_title
        if contact_info is not SENTINEL:
            self.contact_info = contact_info
        if is_open is not SENTINEL:
            self.is_open = is_open
        if open_to_applicants is not SENTINEL:
            self.open_to_applicants = self._define_list(
                open_to_applicants, OpenToApplicants
            )
        if opening_date is not SENTINEL:
            self.opening_date = opening_date
        if opportunity_assistance_listing is not SENTINEL:
            self.opportunity_assistance_listing = self._define_object(
                opportunity_assistance_listing, OpportunityAssistanceListingV1
            )
        if opportunity_id is not SENTINEL:
            self.opportunity_id = opportunity_id
        self._kwargs = kwargs
