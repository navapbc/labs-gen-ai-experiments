# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL
from .experimental_v1 import ExperimentalV1
from .opportunity_search_filter_v1 import OpportunitySearchFilterV1
from .opportunity_pagination_v1 import OpportunityPaginationV1


class Format(Enum):
    """An enumeration representing different categories.

    :cvar JSON: "json"
    :vartype JSON: str
    :cvar CSV: "csv"
    :vartype CSV: str
    """

    JSON = "json"
    CSV = "csv"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, Format._member_map_.values()))


class OpportunitySearchRequestV1QueryOperator(Enum):
    """An enumeration representing different categories.

    :cvar AND: "AND"
    :vartype AND: str
    :cvar OR: "OR"
    :vartype OR: str
    """

    AND = "AND"
    OR = "OR"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(
                lambda x: x.value,
                OpportunitySearchRequestV1QueryOperator._member_map_.values(),
            )
        )


@JsonMap({})
class OpportunitySearchRequestV1(BaseModel):
    """OpportunitySearchRequestV1

    :param experimental: experimental, defaults to None
    :type experimental: ExperimentalV1, optional
    :param filters: filters, defaults to None
    :type filters: OpportunitySearchFilterV1, optional
    :param format: The format of the response, defaults to None
    :type format: Format, optional
    :param pagination: pagination
    :type pagination: OpportunityPaginationV1
    :param query: Query string which searches against several text fields, defaults to None
    :type query: str, optional
    :param query_operator: Query operator for combining search conditions, defaults to None
    :type query_operator: OpportunitySearchRequestV1QueryOperator, optional
    """

    def __init__(
        self,
        pagination: OpportunityPaginationV1,
        experimental: ExperimentalV1 = SENTINEL,
        filters: OpportunitySearchFilterV1 = SENTINEL,
        format: Format = SENTINEL,
        query: str = SENTINEL,
        query_operator: OpportunitySearchRequestV1QueryOperator = SENTINEL,
        **kwargs,
    ):
        """OpportunitySearchRequestV1

        :param experimental: experimental, defaults to None
        :type experimental: ExperimentalV1, optional
        :param filters: filters, defaults to None
        :type filters: OpportunitySearchFilterV1, optional
        :param format: The format of the response, defaults to None
        :type format: Format, optional
        :param pagination: pagination
        :type pagination: OpportunityPaginationV1
        :param query: Query string which searches against several text fields, defaults to None
        :type query: str, optional
        :param query_operator: Query operator for combining search conditions, defaults to None
        :type query_operator: OpportunitySearchRequestV1QueryOperator, optional
        """
        if experimental is not SENTINEL:
            self.experimental = self._define_object(experimental, ExperimentalV1)
        if filters is not SENTINEL:
            self.filters = self._define_object(filters, OpportunitySearchFilterV1)
        if format is not SENTINEL:
            self.format = self._enum_matching(format, Format.list(), "format")
        self.pagination = self._define_object(pagination, OpportunityPaginationV1)
        if query is not SENTINEL:
            self.query = self._define_str("query", query, min_length=1, max_length=100)
        if query_operator is not SENTINEL:
            self.query_operator = self._enum_matching(
                query_operator,
                OpportunitySearchRequestV1QueryOperator.list(),
                "query_operator",
            )
        self._kwargs = kwargs
