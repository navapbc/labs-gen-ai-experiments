# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL


class ExternalUserType(Enum):
    """An enumeration representing different categories.

    :cvar LOGINGOV: "login_gov"
    :vartype LOGINGOV: str
    """

    LOGINGOV = "login_gov"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ExternalUserType._member_map_.values()))


@JsonMap({})
class User(BaseModel):
    """User

    :param email: The email address returned from Oauth2 provider, defaults to None
    :type email: str, optional
    :param external_user_type: The Oauth2 provider through which a user was authenticated, defaults to None
    :type external_user_type: ExternalUserType, optional
    :param user_id: The internal ID of a user, defaults to None
    :type user_id: str, optional
    """

    def __init__(
        self,
        email: str = SENTINEL,
        external_user_type: ExternalUserType = SENTINEL,
        user_id: str = SENTINEL,
        **kwargs
    ):
        """User

        :param email: The email address returned from Oauth2 provider, defaults to None
        :type email: str, optional
        :param external_user_type: The Oauth2 provider through which a user was authenticated, defaults to None
        :type external_user_type: ExternalUserType, optional
        :param user_id: The internal ID of a user, defaults to None
        :type user_id: str, optional
        """
        if email is not SENTINEL:
            self.email = email
        if external_user_type is not SENTINEL:
            self.external_user_type = self._enum_matching(
                external_user_type, ExternalUserType.list(), "external_user_type"
            )
        if user_id is not SENTINEL:
            self.user_id = user_id
        self._kwargs = kwargs
