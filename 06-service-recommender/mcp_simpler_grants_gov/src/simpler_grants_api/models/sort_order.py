# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL


class SortOrderSortDirection(Enum):
    """An enumeration representing different categories.

    :cvar ASCENDING: "ascending"
    :vartype ASCENDING: str
    :cvar DESCENDING: "descending"
    :vartype DESCENDING: str
    """

    ASCENDING = "ascending"
    DESCENDING = "descending"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(
            map(lambda x: x.value, SortOrderSortDirection._member_map_.values())
        )


@JsonMap({})
class SortOrder(BaseModel):
    """SortOrder

    :param order_by: The field that the records were sorted by, defaults to None
    :type order_by: str, optional
    :param sort_direction: The direction the records are sorted, defaults to None
    :type sort_direction: SortOrderSortDirection, optional
    """

    def __init__(
        self,
        order_by: str = SENTINEL,
        sort_direction: SortOrderSortDirection = SENTINEL,
        **kwargs
    ):
        """SortOrder

        :param order_by: The field that the records were sorted by, defaults to None
        :type order_by: str, optional
        :param sort_direction: The direction the records are sorted, defaults to None
        :type sort_direction: SortOrderSortDirection, optional
        """
        if order_by is not SENTINEL:
            self.order_by = order_by
        if sort_direction is not SENTINEL:
            self.sort_direction = self._enum_matching(
                sort_direction, SortOrderSortDirection.list(), "sort_direction"
            )
        self._kwargs = kwargs
