# This file was generated by liblab | https://liblab.com/

from __future__ import annotations
from enum import Enum
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL
from .date_range import DateRange


class ExtractType(Enum):
    """An enumeration representing different categories.

    :cvar OPPORTUNITIESJSON: "opportunities_json"
    :vartype OPPORTUNITIESJSON: str
    :cvar OPPORTUNITIESCSV: "opportunities_csv"
    :vartype OPPORTUNITIESCSV: str
    """

    OPPORTUNITIESJSON = "opportunities_json"
    OPPORTUNITIESCSV = "opportunities_csv"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ExtractType._member_map_.values()))


@JsonMap({})
class ExtractMetadataFilterV1(BaseModel):
    """ExtractMetadataFilterV1

    :param created_at: created_at, defaults to None
    :type created_at: DateRange, optional
    :param extract_type: The type of extract to filter by, defaults to None
    :type extract_type: ExtractType, optional
    """

    def __init__(
        self,
        created_at: DateRange = SENTINEL,
        extract_type: ExtractType = SENTINEL,
        **kwargs,
    ):
        """ExtractMetadataFilterV1

        :param created_at: created_at, defaults to None
        :type created_at: DateRange, optional
        :param extract_type: The type of extract to filter by, defaults to None
        :type extract_type: ExtractType, optional
        """
        if created_at is not SENTINEL:
            self.created_at = self._define_object(created_at, DateRange)
        if extract_type is not SENTINEL:
            self.extract_type = self._enum_matching(
                extract_type, ExtractType.list(), "extract_type"
            )
        self._kwargs = kwargs
