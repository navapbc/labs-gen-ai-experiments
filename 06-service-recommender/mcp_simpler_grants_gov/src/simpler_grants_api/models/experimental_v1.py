# This file was generated by liblab | https://liblab.com/

from enum import Enum
from .utils.json_map import JsonMap
from .utils.base_model import BaseModel
from .utils.sentinel import SENTINEL


class ScoringRule(Enum):
    """An enumeration representing different categories.

    :cvar DEFAULT: "default"
    :vartype DEFAULT: str
    :cvar EXPANDED: "expanded"
    :vartype EXPANDED: str
    :cvar AGENCY: "agency"
    :vartype AGENCY: str
    :cvar ATTACHMENTONLY: "attachment_only"
    :vartype ATTACHMENTONLY: str
    """

    DEFAULT = "default"
    EXPANDED = "expanded"
    AGENCY = "agency"
    ATTACHMENTONLY = "attachment_only"

    def list():
        """Lists all category values.

        :return: A list of all category values.
        :rtype: list
        """
        return list(map(lambda x: x.value, ScoringRule._member_map_.values()))


@JsonMap({})
class ExperimentalV1(BaseModel):
    """ExperimentalV1

    :param scoring_rule: Scoring rule to query against OpenSearch, defaults to None
    :type scoring_rule: ScoringRule, optional
    """

    def __init__(self, scoring_rule: ScoringRule = SENTINEL, **kwargs):
        """ExperimentalV1

        :param scoring_rule: Scoring rule to query against OpenSearch, defaults to None
        :type scoring_rule: ScoringRule, optional
        """
        if scoring_rule is not SENTINEL:
            self.scoring_rule = self._enum_matching(
                scoring_rule, ScoringRule.list(), "scoring_rule"
            )
        self._kwargs = kwargs
