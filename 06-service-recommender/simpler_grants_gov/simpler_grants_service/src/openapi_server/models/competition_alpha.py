# coding: utf-8

"""
    Simpler Grants API

     Back end API for simpler.grants.gov.  This API is an ALPHA VERSION! Its current form is primarily for testing and feedback. Features are still under heavy development, and subject to change. Not for production use.  See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details. 

    The version of the OpenAPI document: v0
    Contact: simpler@grants.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.competition_form_alpha import CompetitionFormAlpha
from openapi_server.models.competition_instruction_alpha import CompetitionInstructionAlpha
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CompetitionAlpha(BaseModel):
    """
    CompetitionAlpha
    """ # noqa: E501
    closing_date: Optional[date] = Field(default=None, description="The closing date of the competition, the last day applications are accepted")
    competition_forms: Optional[List[CompetitionFormAlpha]] = None
    competition_id: Optional[StrictStr] = Field(default=None, description="The competition ID")
    competition_instructions: Optional[List[CompetitionInstructionAlpha]] = Field(default=None, description="List of instruction files associated with this competition")
    competition_title: Optional[StrictStr] = Field(default=None, description="The title of the competition")
    contact_info: Optional[StrictStr] = Field(default=None, description="Contact info getting assistance with the competition")
    is_open: Optional[StrictBool] = Field(default=None, description="Whether the competition is open and accepting applications")
    open_to_applicants: Optional[List[StrictStr]] = None
    opening_date: Optional[date] = Field(default=None, description="The opening date of the competition, the first day applications are accepted")
    opportunity_assistance_listing: Optional[Dict[str, Any]] = None
    opportunity_id: Optional[StrictInt] = Field(default=None, description="The opportunity ID that the competition is associated with")
    __properties: ClassVar[List[str]] = ["closing_date", "competition_forms", "competition_id", "competition_instructions", "competition_title", "contact_info", "is_open", "open_to_applicants", "opening_date", "opportunity_assistance_listing", "opportunity_id"]

    @field_validator('open_to_applicants')
    def open_to_applicants_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('individual', 'organization',):
                raise ValueError("each list item must be one of ('individual', 'organization')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CompetitionAlpha from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in competition_forms (list)
        _items = []
        if self.competition_forms:
            for _item in self.competition_forms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['competition_forms'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in competition_instructions (list)
        _items = []
        if self.competition_instructions:
            for _item in self.competition_instructions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['competition_instructions'] = _items
        # override the default output from pydantic by calling `to_dict()` of opportunity_assistance_listing
        if self.opportunity_assistance_listing:
            _dict['opportunity_assistance_listing'] = self.opportunity_assistance_listing.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CompetitionAlpha from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "closing_date": obj.get("closing_date"),
            "competition_forms": [CompetitionFormAlpha.from_dict(_item) for _item in obj.get("competition_forms")] if obj.get("competition_forms") is not None else None,
            "competition_id": obj.get("competition_id"),
            "competition_instructions": [CompetitionInstructionAlpha.from_dict(_item) for _item in obj.get("competition_instructions")] if obj.get("competition_instructions") is not None else None,
            "competition_title": obj.get("competition_title"),
            "contact_info": obj.get("contact_info"),
            "is_open": obj.get("is_open"),
            "open_to_applicants": obj.get("open_to_applicants"),
            "opening_date": obj.get("opening_date"),
            "opportunity_assistance_listing": OpportunityAssistanceListingV1.from_dict(obj.get("opportunity_assistance_listing")) if obj.get("opportunity_assistance_listing") is not None else None,
            "opportunity_id": obj.get("opportunity_id")
        })
        return _obj


