# coding: utf-8

"""
    Simpler Grants API

     Back end API for simpler.grants.gov.  This API is an ALPHA VERSION! Its current form is primarily for testing and feedback. Features are still under heavy development, and subject to change. Not for production use.  See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details. 

    The version of the OpenAPI document: v0
    Contact: simpler@grants.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HealthcheckMetadata(BaseModel):
    """
    HealthcheckMetadata
    """ # noqa: E501
    commit_link: Optional[StrictStr] = Field(default=None, description="A github link to the latest deployed commit")
    commit_sha: Optional[StrictStr] = Field(default=None, description="The github commit sha for the latest deployed commit")
    deploy_whoami: Optional[StrictStr] = Field(default=None, description="The latest user to deploy the application")
    last_deploy_time: Optional[datetime] = Field(default=None, description="Latest deploy time in US/Eastern timezone")
    release_notes_link: Optional[StrictStr] = Field(default=None, description="A github link to the release notes - direct if the latest deploy was a release")
    __properties: ClassVar[List[str]] = ["commit_link", "commit_sha", "deploy_whoami", "last_deploy_time", "release_notes_link"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HealthcheckMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HealthcheckMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "commit_link": obj.get("commit_link"),
            "commit_sha": obj.get("commit_sha"),
            "deploy_whoami": obj.get("deploy_whoami"),
            "last_deploy_time": obj.get("last_deploy_time"),
            "release_notes_link": obj.get("release_notes_link")
        })
        return _obj


