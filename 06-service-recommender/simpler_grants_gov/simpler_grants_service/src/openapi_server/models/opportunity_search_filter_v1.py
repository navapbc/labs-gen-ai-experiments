# coding: utf-8

"""
    Simpler Grants API

     Back end API for simpler.grants.gov.  This API is an ALPHA VERSION! Its current form is primarily for testing and feedback. Features are still under heavy development, and subject to change. Not for production use.  See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details. 

    The version of the OpenAPI document: v0
    Contact: simpler@grants.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OpportunitySearchFilterV1(BaseModel):
    """
    OpportunitySearchFilterV1
    """ # noqa: E501
    agency: Optional[Dict[str, Any]] = None
    applicant_type: Optional[Dict[str, Any]] = None
    assistance_listing_number: Optional[Dict[str, Any]] = None
    award_ceiling: Optional[Dict[str, Any]] = None
    award_floor: Optional[Dict[str, Any]] = None
    close_date: Optional[Dict[str, Any]] = None
    estimated_total_program_funding: Optional[Dict[str, Any]] = None
    expected_number_of_awards: Optional[Dict[str, Any]] = None
    funding_category: Optional[Dict[str, Any]] = None
    funding_instrument: Optional[Dict[str, Any]] = None
    is_cost_sharing: Optional[Dict[str, Any]] = None
    opportunity_status: Optional[Dict[str, Any]] = None
    post_date: Optional[Dict[str, Any]] = None
    top_level_agency: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["agency", "applicant_type", "assistance_listing_number", "award_ceiling", "award_floor", "close_date", "estimated_total_program_funding", "expected_number_of_awards", "funding_category", "funding_instrument", "is_cost_sharing", "opportunity_status", "post_date", "top_level_agency"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OpportunitySearchFilterV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of agency
        if self.agency:
            _dict['agency'] = self.agency.to_dict()
        # override the default output from pydantic by calling `to_dict()` of applicant_type
        if self.applicant_type:
            _dict['applicant_type'] = self.applicant_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assistance_listing_number
        if self.assistance_listing_number:
            _dict['assistance_listing_number'] = self.assistance_listing_number.to_dict()
        # override the default output from pydantic by calling `to_dict()` of award_ceiling
        if self.award_ceiling:
            _dict['award_ceiling'] = self.award_ceiling.to_dict()
        # override the default output from pydantic by calling `to_dict()` of award_floor
        if self.award_floor:
            _dict['award_floor'] = self.award_floor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of close_date
        if self.close_date:
            _dict['close_date'] = self.close_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of estimated_total_program_funding
        if self.estimated_total_program_funding:
            _dict['estimated_total_program_funding'] = self.estimated_total_program_funding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expected_number_of_awards
        if self.expected_number_of_awards:
            _dict['expected_number_of_awards'] = self.expected_number_of_awards.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funding_category
        if self.funding_category:
            _dict['funding_category'] = self.funding_category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of funding_instrument
        if self.funding_instrument:
            _dict['funding_instrument'] = self.funding_instrument.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_cost_sharing
        if self.is_cost_sharing:
            _dict['is_cost_sharing'] = self.is_cost_sharing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opportunity_status
        if self.opportunity_status:
            _dict['opportunity_status'] = self.opportunity_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of post_date
        if self.post_date:
            _dict['post_date'] = self.post_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of top_level_agency
        if self.top_level_agency:
            _dict['top_level_agency'] = self.top_level_agency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OpportunitySearchFilterV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agency": AgencyOppSearchFilterV1.from_dict(obj.get("agency")) if obj.get("agency") is not None else None,
            "applicant_type": ApplicantTypeFilterV1.from_dict(obj.get("applicant_type")) if obj.get("applicant_type") is not None else None,
            "assistance_listing_number": AssistanceListingNumberFilterV1.from_dict(obj.get("assistance_listing_number")) if obj.get("assistance_listing_number") is not None else None,
            "award_ceiling": AwardCeilingFilterV1.from_dict(obj.get("award_ceiling")) if obj.get("award_ceiling") is not None else None,
            "award_floor": AwardFloorFilterV1.from_dict(obj.get("award_floor")) if obj.get("award_floor") is not None else None,
            "close_date": CloseDateFilterV1.from_dict(obj.get("close_date")) if obj.get("close_date") is not None else None,
            "estimated_total_program_funding": EstimatedTotalProgramFundingFilterV1.from_dict(obj.get("estimated_total_program_funding")) if obj.get("estimated_total_program_funding") is not None else None,
            "expected_number_of_awards": ExpectedNumberAwardsFilterV1.from_dict(obj.get("expected_number_of_awards")) if obj.get("expected_number_of_awards") is not None else None,
            "funding_category": FundingCategoryFilterV1.from_dict(obj.get("funding_category")) if obj.get("funding_category") is not None else None,
            "funding_instrument": FundingInstrumentFilterV1.from_dict(obj.get("funding_instrument")) if obj.get("funding_instrument") is not None else None,
            "is_cost_sharing": IsCostSharingFilterV1.from_dict(obj.get("is_cost_sharing")) if obj.get("is_cost_sharing") is not None else None,
            "opportunity_status": OpportunityStatusFilterV1.from_dict(obj.get("opportunity_status")) if obj.get("opportunity_status") is not None else None,
            "post_date": PostDateFilterV1.from_dict(obj.get("post_date")) if obj.get("post_date") is not None else None,
            "top_level_agency": TopLevelAgencyOppSearchFilterV1.from_dict(obj.get("top_level_agency")) if obj.get("top_level_agency") is not None else None
        })
        return _obj


