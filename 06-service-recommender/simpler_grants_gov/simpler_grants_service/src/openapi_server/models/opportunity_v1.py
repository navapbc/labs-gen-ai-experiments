# coding: utf-8

"""
    Simpler Grants API

     Back end API for simpler.grants.gov.  This API is an ALPHA VERSION! Its current form is primarily for testing and feedback. Features are still under heavy development, and subject to change. Not for production use.  See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details. 

    The version of the OpenAPI document: v0
    Contact: simpler@grants.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.opportunity_assistance_listing_v1 import OpportunityAssistanceListingV1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OpportunityV1(BaseModel):
    """
    OpportunityV1
    """ # noqa: E501
    agency: Optional[StrictStr] = Field(default=None, description="DEPRECATED - use: agency_code")
    agency_code: Optional[StrictStr] = Field(default=None, description="The agency who created the opportunity")
    agency_name: Optional[StrictStr] = Field(default=None, description="The name of the agency who created the opportunity")
    category: Optional[StrictStr] = Field(default=None, description="The opportunity category")
    category_explanation: Optional[StrictStr] = Field(default=None, description="Explanation of the category when the category is 'O' (other)")
    created_at: Optional[datetime] = None
    opportunity_assistance_listings: Optional[List[OpportunityAssistanceListingV1]] = None
    opportunity_id: Optional[StrictInt] = Field(default=None, description="The internal ID of the opportunity")
    opportunity_number: Optional[StrictStr] = Field(default=None, description="The funding opportunity number")
    opportunity_status: Optional[StrictStr] = Field(default=None, description="The current status of the opportunity")
    opportunity_title: Optional[StrictStr] = Field(default=None, description="The title of the opportunity")
    summary: Optional[Dict[str, Any]] = None
    top_level_agency_name: Optional[StrictStr] = Field(default=None, description="The name of the top level agency who created the oppportunity")
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["agency", "agency_code", "agency_name", "category", "category_explanation", "created_at", "opportunity_assistance_listings", "opportunity_id", "opportunity_number", "opportunity_status", "opportunity_title", "summary", "top_level_agency_name", "updated_at"]

    @field_validator('category')
    def category_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('discretionary', 'mandatory', 'continuation', 'earmark', 'other',):
            raise ValueError("must be one of enum values ('discretionary', 'mandatory', 'continuation', 'earmark', 'other')")
        return value

    @field_validator('opportunity_status')
    def opportunity_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('forecasted', 'posted', 'closed', 'archived',):
            raise ValueError("must be one of enum values ('forecasted', 'posted', 'closed', 'archived')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OpportunityV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in opportunity_assistance_listings (list)
        _items = []
        if self.opportunity_assistance_listings:
            for _item in self.opportunity_assistance_listings:
                if _item:
                    _items.append(_item.to_dict())
            _dict['opportunity_assistance_listings'] = _items
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OpportunityV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agency": obj.get("agency"),
            "agency_code": obj.get("agency_code"),
            "agency_name": obj.get("agency_name"),
            "category": obj.get("category"),
            "category_explanation": obj.get("category_explanation"),
            "created_at": obj.get("created_at"),
            "opportunity_assistance_listings": [OpportunityAssistanceListingV1.from_dict(_item) for _item in obj.get("opportunity_assistance_listings")] if obj.get("opportunity_assistance_listings") is not None else None,
            "opportunity_id": obj.get("opportunity_id"),
            "opportunity_number": obj.get("opportunity_number"),
            "opportunity_status": obj.get("opportunity_status"),
            "opportunity_title": obj.get("opportunity_title"),
            "summary": OpportunitySummaryV1.from_dict(obj.get("summary")) if obj.get("summary") is not None else None,
            "top_level_agency_name": obj.get("top_level_agency_name"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


