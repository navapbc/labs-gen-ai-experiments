# coding: utf-8

"""
    Simpler Grants API

     Back end API for simpler.grants.gov.  This API is an ALPHA VERSION! Its current form is primarily for testing and feedback. Features are still under heavy development, and subject to change. Not for production use.  See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details. 

    The version of the OpenAPI document: v0
    Contact: simpler@grants.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OpportunitySummaryV1(BaseModel):
    """
    OpportunitySummaryV1
    """ # noqa: E501
    additional_info_url: Optional[StrictStr] = Field(default=None, description="A URL to a website that can provide additional information about the opportunity")
    additional_info_url_description: Optional[StrictStr] = Field(default=None, description="The text to display for the additional_info_url link")
    agency_contact_description: Optional[StrictStr] = Field(default=None, description="Information regarding contacting the agency who owns the opportunity")
    agency_email_address: Optional[StrictStr] = Field(default=None, description="The contact email of the agency who owns the opportunity")
    agency_email_address_description: Optional[StrictStr] = Field(default=None, description="The text for the link to the agency email address")
    applicant_eligibility_description: Optional[StrictStr] = Field(default=None, description="Additional information about the types of applicants that are eligible")
    applicant_types: Optional[List[StrictStr]] = None
    archive_date: Optional[date] = Field(default=None, description="When the opportunity will be archived")
    award_ceiling: Optional[StrictInt] = Field(default=None, description="The maximum amount an opportunity would award")
    award_floor: Optional[StrictInt] = Field(default=None, description="The minimum amount an opportunity would award")
    close_date: Optional[date] = Field(default=None, description="The date that the opportunity will close - only set if is_forecast=False")
    close_date_description: Optional[StrictStr] = Field(default=None, description="Optional details regarding the close date")
    created_at: Optional[datetime] = Field(default=None, description="When the opportunity summary was created")
    estimated_total_program_funding: Optional[StrictInt] = Field(default=None, description="The total program funding of the opportunity in US Dollars")
    expected_number_of_awards: Optional[StrictInt] = Field(default=None, description="The number of awards the opportunity is expected to award")
    fiscal_year: Optional[StrictInt] = Field(default=None, description="Forecasted opportunity only. The fiscal year the project is expected to be funded and launched")
    forecasted_award_date: Optional[date] = Field(default=None, description="Forecasted opportunity only. The date the grantor plans to award the opportunity.")
    forecasted_close_date: Optional[date] = Field(default=None, description="Forecasted opportunity only. The date the opportunity is expected to be close once posted.")
    forecasted_close_date_description: Optional[StrictStr] = Field(default=None, description="Forecasted opportunity only. Optional details regarding the forecasted closed date.")
    forecasted_post_date: Optional[date] = Field(default=None, description="Forecasted opportunity only. The date the opportunity is expected to be posted, and transition out of being a forecast")
    forecasted_project_start_date: Optional[date] = Field(default=None, description="Forecasted opportunity only. The date the grantor expects the award recipient should start their project")
    funding_categories: Optional[List[StrictStr]] = None
    funding_category_description: Optional[StrictStr] = Field(default=None, description="Additional information about the funding category")
    funding_instruments: Optional[List[StrictStr]] = None
    is_cost_sharing: Optional[StrictBool] = Field(default=None, description="Whether or not the opportunity has a cost sharing/matching requirement")
    is_forecast: Optional[StrictBool] = Field(default=None, description="Whether the opportunity is forecasted, that is, the information is only an estimate and not yet official")
    post_date: Optional[date] = Field(default=None, description="The date the opportunity was posted")
    summary_description: Optional[StrictStr] = Field(default=None, description="The summary of the opportunity")
    updated_at: Optional[datetime] = Field(default=None, description="When the opportunity summary was last updated")
    version_number: Optional[StrictInt] = Field(default=None, description="The version number of the opportunity summary")
    __properties: ClassVar[List[str]] = ["additional_info_url", "additional_info_url_description", "agency_contact_description", "agency_email_address", "agency_email_address_description", "applicant_eligibility_description", "applicant_types", "archive_date", "award_ceiling", "award_floor", "close_date", "close_date_description", "created_at", "estimated_total_program_funding", "expected_number_of_awards", "fiscal_year", "forecasted_award_date", "forecasted_close_date", "forecasted_close_date_description", "forecasted_post_date", "forecasted_project_start_date", "funding_categories", "funding_category_description", "funding_instruments", "is_cost_sharing", "is_forecast", "post_date", "summary_description", "updated_at", "version_number"]

    @field_validator('applicant_types')
    def applicant_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('state_governments', 'county_governments', 'city_or_township_governments', 'special_district_governments', 'independent_school_districts', 'public_and_state_institutions_of_higher_education', 'private_institutions_of_higher_education', 'federally_recognized_native_american_tribal_governments', 'other_native_american_tribal_organizations', 'public_and_indian_housing_authorities', 'nonprofits_non_higher_education_with_501c3', 'nonprofits_non_higher_education_without_501c3', 'individuals', 'for_profit_organizations_other_than_small_businesses', 'small_businesses', 'other', 'unrestricted',):
                raise ValueError("each list item must be one of ('state_governments', 'county_governments', 'city_or_township_governments', 'special_district_governments', 'independent_school_districts', 'public_and_state_institutions_of_higher_education', 'private_institutions_of_higher_education', 'federally_recognized_native_american_tribal_governments', 'other_native_american_tribal_organizations', 'public_and_indian_housing_authorities', 'nonprofits_non_higher_education_with_501c3', 'nonprofits_non_higher_education_without_501c3', 'individuals', 'for_profit_organizations_other_than_small_businesses', 'small_businesses', 'other', 'unrestricted')")
        return value

    @field_validator('funding_categories')
    def funding_categories_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('recovery_act', 'agriculture', 'arts', 'business_and_commerce', 'community_development', 'consumer_protection', 'disaster_prevention_and_relief', 'education', 'employment_labor_and_training', 'energy', 'environment', 'food_and_nutrition', 'health', 'housing', 'humanities', 'infrastructure_investment_and_jobs_act', 'information_and_statistics', 'income_security_and_social_services', 'law_justice_and_legal_services', 'natural_resources', 'opportunity_zone_benefits', 'regional_development', 'science_technology_and_other_research_and_development', 'transportation', 'affordable_care_act', 'other',):
                raise ValueError("each list item must be one of ('recovery_act', 'agriculture', 'arts', 'business_and_commerce', 'community_development', 'consumer_protection', 'disaster_prevention_and_relief', 'education', 'employment_labor_and_training', 'energy', 'environment', 'food_and_nutrition', 'health', 'housing', 'humanities', 'infrastructure_investment_and_jobs_act', 'information_and_statistics', 'income_security_and_social_services', 'law_justice_and_legal_services', 'natural_resources', 'opportunity_zone_benefits', 'regional_development', 'science_technology_and_other_research_and_development', 'transportation', 'affordable_care_act', 'other')")
        return value

    @field_validator('funding_instruments')
    def funding_instruments_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('cooperative_agreement', 'grant', 'procurement_contract', 'other',):
                raise ValueError("each list item must be one of ('cooperative_agreement', 'grant', 'procurement_contract', 'other')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OpportunitySummaryV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OpportunitySummaryV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "additional_info_url": obj.get("additional_info_url"),
            "additional_info_url_description": obj.get("additional_info_url_description"),
            "agency_contact_description": obj.get("agency_contact_description"),
            "agency_email_address": obj.get("agency_email_address"),
            "agency_email_address_description": obj.get("agency_email_address_description"),
            "applicant_eligibility_description": obj.get("applicant_eligibility_description"),
            "applicant_types": obj.get("applicant_types"),
            "archive_date": obj.get("archive_date"),
            "award_ceiling": obj.get("award_ceiling"),
            "award_floor": obj.get("award_floor"),
            "close_date": obj.get("close_date"),
            "close_date_description": obj.get("close_date_description"),
            "created_at": obj.get("created_at"),
            "estimated_total_program_funding": obj.get("estimated_total_program_funding"),
            "expected_number_of_awards": obj.get("expected_number_of_awards"),
            "fiscal_year": obj.get("fiscal_year"),
            "forecasted_award_date": obj.get("forecasted_award_date"),
            "forecasted_close_date": obj.get("forecasted_close_date"),
            "forecasted_close_date_description": obj.get("forecasted_close_date_description"),
            "forecasted_post_date": obj.get("forecasted_post_date"),
            "forecasted_project_start_date": obj.get("forecasted_project_start_date"),
            "funding_categories": obj.get("funding_categories"),
            "funding_category_description": obj.get("funding_category_description"),
            "funding_instruments": obj.get("funding_instruments"),
            "is_cost_sharing": obj.get("is_cost_sharing"),
            "is_forecast": obj.get("is_forecast"),
            "post_date": obj.get("post_date"),
            "summary_description": obj.get("summary_description"),
            "updated_at": obj.get("updated_at"),
            "version_number": obj.get("version_number")
        })
        return _obj


