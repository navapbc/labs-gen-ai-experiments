# coding: utf-8

"""
    Simpler Grants API

     Back end API for simpler.grants.gov.  This API is an ALPHA VERSION! Its current form is primarily for testing and feedback. Features are still under heavy development, and subject to change. Not for production use.  See [Release Phases](https://github.com/github/roadmap?tab=readme-ov-file#release-phases) for further details. 

    The version of the OpenAPI document: v0
    Contact: simpler@grants.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AgencyResponse(BaseModel):
    """
    AgencyResponse
    """ # noqa: E501
    agency_code: Optional[StrictStr] = None
    agency_id: Optional[StrictStr] = None
    agency_name: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    top_level_agency: Optional[Dict[str, Any]] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["agency_code", "agency_id", "agency_name", "created_at", "top_level_agency", "updated_at"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AgencyResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of top_level_agency
        if self.top_level_agency:
            _dict['top_level_agency'] = self.top_level_agency.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AgencyResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "agency_code": obj.get("agency_code"),
            "agency_id": obj.get("agency_id"),
            "agency_name": obj.get("agency_name"),
            "created_at": obj.get("created_at"),
            "top_level_agency": AgencyResponse.from_dict(obj.get("top_level_agency")) if obj.get("top_level_agency") is not None else None,
            "updated_at": obj.get("updated_at")
        })
        return _obj


