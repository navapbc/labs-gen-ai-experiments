# coding: utf-8

from typing import Dict, List  # noqa: F401
import importlib
import pkgutil

from openapi_server.apis.keyword_api_base import BaseKeywordApi
import openapi_server.impl

from fastapi import (  # noqa: F401
    APIRouter,
    Body,
    Cookie,
    Depends,
    Form,
    Header,
    HTTPException,
    Path,
    Query,
    Response,
    Security,
    status,
)

from openapi_server.models.extra_models import TokenModel  # noqa: F401
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import Any, Optional
from typing_extensions import Annotated
from openapi_server.models.location_mode_dto import LocationModeDto
from openapi_server.models.location_type_dto import LocationTypeDto
from openapi_server.models.search_input_dto import SearchInputDto
from openapi_server.models.search_mode_dto import SearchModeDto
from openapi_server.models.search_output_dto import SearchOutputDto
from openapi_server.security_api import get_token_apiKeyQuery, get_token_apiKeyHeader

router = APIRouter()

ns_pkg = openapi_server.impl
for _, name, _ in pkgutil.iter_modules(ns_pkg.__path__, ns_pkg.__name__ + "."):
    importlib.import_module(name)


@router.get(
    "/keyword",
    responses={
        200: {"model": SearchOutputDto, "description": "OK"},
        400: {"description": "Bad Request"},
        404: {"model": SearchOutputDto, "description": "Not Found"},
        500: {"model": SearchOutputDto, "description": "Internal Server Error"},
    },
    tags=["Keyword"],
    summary="Search: Keywords",
    response_model_by_alias=True,
)
async def get_keyword_keywords_keywords_location_location(
    keywords: Annotated[StrictStr, Field(description="One or more keywords to search the repository. Set SearchMode to 'Any' to match on at least one keyword.              Set SearchMode to 'All' to match on all words. To search on taxonomy term(s), set KeywordIsTaxonomyTerm to true. To search on taxonomy code(s),              set KeywordIsTaxonomyCode to true. More detail on taxonomy searches: For taxonomy code or taxonomy term searches, set SearchMode to 'All' to require all taxonomy terms be assigned              to resources returned with search results. Set SearchMode to 'Any' to require a match on at least one taxonomy term/code. Wildcards can be used to              search resources with a partial taxonomy code (eg. BD\\*). All resources with taxonomy codes matching the characters before * will be returned.              As an example, a taxonomy code search for BD* will return all resources with a taxonomy code beginning with BD, the taxonomy code for Food.              Using taxonomy code wildcard searches ensures all resources with 'child' taxonomy codes are returned (eg. BD-1800 is a child of BD, and would be              returned with the BD* wildcard taxonomy code search). Wilcards can also be used for taxonomy term searches, and will return matches on all taxonomy terms matching on one or more terms located within the full taxonmy term             (eg. Food Pantry can be match on Food and/or Pantry). A match occurs when all characters before the \\* are matched on or more terms with the full taxonomy term. As as example, a wilcard search on Food* will return              resources with taxonomy term(s) that include any word within its taxonomy term(s) beginning with 'Food'. A search for F\\* will return resources with taxonomy term(s) beginning with F).")] = Query(None, description="One or more keywords to search the repository. Set SearchMode to &#39;Any&#39; to match on at least one keyword.              Set SearchMode to &#39;All&#39; to match on all words. To search on taxonomy term(s), set KeywordIsTaxonomyTerm to true. To search on taxonomy code(s),              set KeywordIsTaxonomyCode to true. More detail on taxonomy searches: For taxonomy code or taxonomy term searches, set SearchMode to &#39;All&#39; to require all taxonomy terms be assigned              to resources returned with search results. Set SearchMode to &#39;Any&#39; to require a match on at least one taxonomy term/code. Wildcards can be used to              search resources with a partial taxonomy code (eg. BD\\*). All resources with taxonomy codes matching the characters before * will be returned.              As an example, a taxonomy code search for BD* will return all resources with a taxonomy code beginning with BD, the taxonomy code for Food.              Using taxonomy code wildcard searches ensures all resources with &#39;child&#39; taxonomy codes are returned (eg. BD-1800 is a child of BD, and would be              returned with the BD* wildcard taxonomy code search). Wilcards can also be used for taxonomy term searches, and will return matches on all taxonomy terms matching on one or more terms located within the full taxonmy term             (eg. Food Pantry can be match on Food and/or Pantry). A match occurs when all characters before the \\* are matched on or more terms with the full taxonomy term. As as example, a wilcard search on Food* will return              resources with taxonomy term(s) that include any word within its taxonomy term(s) beginning with &#39;Food&#39;. A search for F\\* will return resources with taxonomy term(s) beginning with F).", alias="keywords"),
    location: Annotated[StrictStr, Field(description="Location to search for resources. Value can be a zip code, city, county, state, country or              longitude_latitude pair. (note regading longitude_latitude location values: longitude_latitude locations must follow this format lon:-119.293106_lat:34.28083 and can include up to a maximum of six digits after the decimal).              There are four patterns for location searching: near, within, serving, servingOnly. The pattern is contolled by LocationMode. See LocationMode for details on using each pattern.")] = Query(None, description="Location to search for resources. Value can be a zip code, city, county, state, country or              longitude_latitude pair. (note regading longitude_latitude location values: longitude_latitude locations must follow this format lon:-119.293106_lat:34.28083 and can include up to a maximum of six digits after the decimal).              There are four patterns for location searching: near, within, serving, servingOnly. The pattern is contolled by LocationMode. See LocationMode for details on using each pattern.", alias="location"),
    location_mode: Annotated[LocationModeDto, Field(description="To search for resources 'near' the location, set LocationMode to 'Near', and 'Distance' to a value greater than 0.              This will return resources with service delivery locations within the chosen distance from the geographic center (latitude/longitude) of the chosen location.              To search for resources 'within' the geographic boundary of the location, set LocationMode to 'Within'. This will return resources within the boundary              (polygon of latitude/longitude values) of the chosen location. To search for resources avaialable within a service area (a geographic area that often defines              eligibility for service), set LocationMode to 'Serving' or 'ServingOnly'. ServingOnly returns resources available within the chosen location (ie. chosen service area).              Serving returns resources delivered within the chosen location, plus all higher level service area boundaries. As an example, setting LocationMode 'ServingOnly'              and location to 'Ventura' will return all resources with a service area of Ventura. If LocationMode is set to 'Serving', resources with a service area of              California and United States will also be returned, as Ventura is a service areas within the higher level service areas of California (state) and United States (country).              Notes: Distance is ignored when LocationMode is set to 'Within', 'Serving' and 'ServingOnly'. OrderByDistance is ignored when LocationMode is set to 'Within'.")] = Header(None, description="To search for resources &#39;near&#39; the location, set LocationMode to &#39;Near&#39;, and &#39;Distance&#39; to a value greater than 0.              This will return resources with service delivery locations within the chosen distance from the geographic center (latitude/longitude) of the chosen location.              To search for resources &#39;within&#39; the geographic boundary of the location, set LocationMode to &#39;Within&#39;. This will return resources within the boundary              (polygon of latitude/longitude values) of the chosen location. To search for resources avaialable within a service area (a geographic area that often defines              eligibility for service), set LocationMode to &#39;Serving&#39; or &#39;ServingOnly&#39;. ServingOnly returns resources available within the chosen location (ie. chosen service area).              Serving returns resources delivered within the chosen location, plus all higher level service area boundaries. As an example, setting LocationMode &#39;ServingOnly&#39;              and location to &#39;Ventura&#39; will return all resources with a service area of Ventura. If LocationMode is set to &#39;Serving&#39;, resources with a service area of              California and United States will also be returned, as Ventura is a service areas within the higher level service areas of California (state) and United States (country).              Notes: Distance is ignored when LocationMode is set to &#39;Within&#39;, &#39;Serving&#39; and &#39;ServingOnly&#39;. OrderByDistance is ignored when LocationMode is set to &#39;Within&#39;."),
    distance: Annotated[Optional[StrictInt], Field(description="Format - int32. Maximum distance from the entered location to the physical address where the resource is availalble (ie. service is delivered).              Set 'OrderByDistance' to true to sort search results from nearest to farthest from enetered location. Distance is ignored (set by the system to 0)              when LocationMode is set to 'Within' because distance is not applicable when searching within a geographic boundary. Distance is set to 5000, when              LocationMode set to 'Serving' or 'ServingOnly' to ensure all resources with assigned with the selected service areas area returned              (ie. locations are considered service areas when LocationMode set to 'Serving' or 'ServingOnly'). As an example, a service (ie. resource) may be              physically located in California but have service areas throughout the country (eg. helplines).")] = Header(None, description="Format - int32. Maximum distance from the entered location to the physical address where the resource is availalble (ie. service is delivered).              Set &#39;OrderByDistance&#39; to true to sort search results from nearest to farthest from enetered location. Distance is ignored (set by the system to 0)              when LocationMode is set to &#39;Within&#39; because distance is not applicable when searching within a geographic boundary. Distance is set to 5000, when              LocationMode set to &#39;Serving&#39; or &#39;ServingOnly&#39; to ensure all resources with assigned with the selected service areas area returned              (ie. locations are considered service areas when LocationMode set to &#39;Serving&#39; or &#39;ServingOnly&#39;). As an example, a service (ie. resource) may be              physically located in California but have service areas throughout the country (eg. helplines)."),
    data_owners: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of data owners to filter search results. Adding one or more values will programatically add a search filter. If multiple data owners are applied (eg. 211ventura,211bayarea), a match on one or more data owners will result in a match (and resource returned). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||211ventura,211ayarea). See /filters/dataOwners on Filters API for a list of data owners.")] = Header(None, description="Comma-delimited list of data owners to filter search results. Adding one or more values will programatically add a search filter. If multiple data owners are applied (eg. 211ventura,211bayarea), a match on one or more data owners will result in a match (and resource returned). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||211ventura,211ayarea). See /filters/dataOwners on Filters API for a list of data owners."),
    tags_service: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of tags to filter search results. Adding one or more values will programatically add a search filter. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||211ventura,211ayarea). If multiple tags are applied (eg. Kinship,Shelter), a match on one or more tags will result in a match (and resource returned). To match on all tags, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/tags on Filters API for a list of tags.")] = Header(None, description="Comma-delimited list of tags to filter search results. Adding one or more values will programatically add a search filter. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||211ventura,211ayarea). If multiple tags are applied (eg. Kinship,Shelter), a match on one or more tags will result in a match (and resource returned). To match on all tags, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/tags on Filters API for a list of tags."),
    search_within_location_type: Annotated[Optional[LocationTypeDto], Field(description="Type of the location used to set the geographic boundary for searching for resources when LocationMode set to 'Within'.              Values are City, County, PostalCode, State, Country, Unknown. As an example, if SearchWithinLocationType is set to 'City' with location set to 'Ventura',              resources with a physical location within the geographic boundary of the city of Ventura will be returned. if SearchWithinLocationType is set to 'County'              with location set to 'Ventura', resources with a physical location within the geographic boundary of the county of Ventura will be returned. Default value              is 'Unknown'. If value is set to 'Unknown' (or not set), the LocationType will be determined using the service.")] = Header(None, description="Type of the location used to set the geographic boundary for searching for resources when LocationMode set to &#39;Within&#39;.              Values are City, County, PostalCode, State, Country, Unknown. As an example, if SearchWithinLocationType is set to &#39;City&#39; with location set to &#39;Ventura&#39;,              resources with a physical location within the geographic boundary of the city of Ventura will be returned. if SearchWithinLocationType is set to &#39;County&#39;              with location set to &#39;Ventura&#39;, resources with a physical location within the geographic boundary of the county of Ventura will be returned. Default value              is &#39;Unknown&#39;. If value is set to &#39;Unknown&#39; (or not set), the LocationType will be determined using the service."),
    skip: Annotated[Optional[StrictInt], Field(description="Format - int32. Number of results to skip. Used with Size to page results. Note that the total number of resources that match the search is returned with 'count' in the search results,              if IncludeTotalCount is set to true.")] = Header(0, description="Format - int32. Number of results to skip. Used with Size to page results. Note that the total number of resources that match the search is returned with &#39;count&#39; in the search results,              if IncludeTotalCount is set to true."),
    size: Annotated[Optional[StrictInt], Field(description="Format - int32. Number of results to be returned. Used with Skip to page results. Note that the total number of resources that match the search is returned with 'count' in the search results,              if IncludeTotalCount is set to true.")] = Header(10, description="Format - int32. Number of results to be returned. Used with Skip to page results. Note that the total number of resources that match the search is returned with &#39;count&#39; in the search results,              if IncludeTotalCount is set to true."),
    search_mode: Annotated[Optional[SearchModeDto], Field(description="Set to 'Any' to match one or more entered search keywords in simple text search. Set to 'All' to match on all search keywords. Default is 'All'.")] = Header(None, description="Set to &#39;Any&#39; to match one or more entered search keywords in simple text search. Set to &#39;All&#39; to match on all search keywords. Default is &#39;All&#39;."),
    keyword_is_taxonomy_code: Annotated[Optional[StrictBool], Field(description="Set to false for regular text search. Set to true to search on taxonomy code or taxonomy code with wild card (e.g. BD-1800 or BD-1800*). Wildcard codes return code and any-child codes. Separate multiple codes with comma (eg. BD-1800,LM-200*). See /filters/taxonomy-terms-and-codes-assigned Filters API for a list of codes.")] = Header(False, description="Set to false for regular text search. Set to true to search on taxonomy code or taxonomy code with wild card (e.g. BD-1800 or BD-1800*). Wildcard codes return code and any-child codes. Separate multiple codes with comma (eg. BD-1800,LM-200*). See /filters/taxonomy-terms-and-codes-assigned Filters API for a list of codes."),
    keyword_is_taxonomy_term: Annotated[Optional[StrictBool], Field(description="Set to false for regular text search. Set to 'true' if keyword is a taxonomy term or taxonomy terms (eg. Food Pantry). Separate multiple terms with comma (Food Pantry,Emergency Shelter). Wildcards cannot be used with terms. See /filters/taxonomy-terms-assigned Filters API for a list of terms.")] = Header(False, description="Set to false for regular text search. Set to &#39;true&#39; if keyword is a taxonomy term or taxonomy terms (eg. Food Pantry). Separate multiple terms with comma (Food Pantry,Emergency Shelter). Wildcards cannot be used with terms. See /filters/taxonomy-terms-assigned Filters API for a list of terms."),
    results_advanced: Annotated[Optional[StrictBool], Field(description="Set to 'true' to return all search request and result details, including the geocoded location and the request input data (which may have been programatically modified). Note: this can help users understand restrictions to search requests implemented through policy, including changes applied to parameter and header arguments.")] = Header(False, description="Set to &#39;true&#39; to return all search request and result details, including the geocoded location and the request input data (which may have been programatically modified). Note: this can help users understand restrictions to search requests implemented through policy, including changes applied to parameter and header arguments."),
    order_by_distance: Annotated[Optional[StrictBool], Field(description="Set to true to order results from nearest to farthest from entered location. (note: orderByDistance applies only to locationMode 'Near' searches only.)")] = Header(True, description="Set to true to order results from nearest to farthest from entered location. (note: orderByDistance applies only to locationMode &#39;Near&#39; searches only.)"),
    taxonomy_terms: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of taxonomy terms to filter data on. Adding one or more values will programatically add a search filter. Multiple terms can be added, and wildcards are supported (eg. Food\\*,Food Pantry ). Create a wildcard by appending * to the end of the term, returning all children. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||Food*,Food Pantry). If multiple terms are applied (eg. Food Pantry,Medical*), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/taxonomy-terms-assigned Filters API for a list of terms.")] = Header(None, description="Comma-delimited list of taxonomy terms to filter data on. Adding one or more values will programatically add a search filter. Multiple terms can be added, and wildcards are supported (eg. Food\\*,Food Pantry ). Create a wildcard by appending * to the end of the term, returning all children. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||Food*,Food Pantry). If multiple terms are applied (eg. Food Pantry,Medical*), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/taxonomy-terms-assigned Filters API for a list of terms."),
    taxonomy_codes: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of taxonomy codes to filter data on. Adding one or more values will programatically add a search filter. Multiple codes can be added, and wildcards are supported (eg. BD-1800\\*,PX-2300,HD-8000.1800* ). Create a wildcard by appending * to the end of the code, returning all children. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/taxonomy-terms-and-codes-assigned Filters API for a list of terms.")] = Header(None, description="Comma-delimited list of taxonomy codes to filter data on. Adding one or more values will programatically add a search filter. Multiple codes can be added, and wildcards are supported (eg. BD-1800\\*,PX-2300,HD-8000.1800* ). Create a wildcard by appending * to the end of the code, returning all children. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/taxonomy-terms-and-codes-assigned Filters API for a list of terms."),
    target_terms: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of target terms to filter data on. A target term is a Y-level AIRS taxonomy term. Adding one or more values will programatically add a search filter. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/target-terms-assigned Filters API for a list of terms.")] = Header(None, description="Comma-delimited list of target terms to filter data on. A target term is a Y-level AIRS taxonomy term. Adding one or more values will programatically add a search filter. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/target-terms-assigned Filters API for a list of terms."),
    service_area_countries: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of countries (non-abbreviated format) to filter results on service area (eg. United States,Canada). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="Comma-delimited list of countries (non-abbreviated format) to filter results on service area (eg. United States,Canada). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_states: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of states (non-abbreviated format) to filter results on service area (eg. North Carolina,California).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||North Carolina,California). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||North Carolina,California). (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="Comma-delimited list of states (non-abbreviated format) to filter results on service area (eg. North Carolina,California).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||North Carolina,California). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||North Carolina,California). (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_counties: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of counties to filter results on service area (eg. Wake,Durham).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||Wake,Durham). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||Wake,Durham). (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="Comma-delimited list of counties to filter results on service area (eg. Wake,Durham).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||Wake,Durham). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||Wake,Durham). (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_cities: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of cities to filter results on service area (eg. Raleigh,San Francisco).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||Raleigh,San Francisco). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||Raleigh,San Francisco). (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="Comma-delimited list of cities to filter results on service area (eg. Raleigh,San Francisco).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||Raleigh,San Francisco). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||Raleigh,San Francisco). (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_postal_codes: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of postal codes to filter results on service area (eg. 95945,95350).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||95945,95350). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||95945,95350). (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="Comma-delimited list of postal codes to filter results on service area (eg. 95945,95350).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||95945,95350). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||95945,95350). (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    address_countries: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of countries (non-abbreviated format) to filter results on location address (eg. United States,Canada). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="Comma-delimited list of countries (non-abbreviated format) to filter results on location address (eg. United States,Canada). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_states: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of states (abbreviated format) to filter results on location address (eg. NC,CA). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||NC,CA). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||NC,CA). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="Comma-delimited list of states (abbreviated format) to filter results on location address (eg. NC,CA). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||NC,CA). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||NC,CA). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_counties: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of counties to filter results on location address (eg. Wake,Durham). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||Wake,Durham). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||Wake,Durham). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="Comma-delimited list of counties to filter results on location address (eg. Wake,Durham). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||Wake,Durham). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||Wake,Durham). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_cities: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of cities to filter results on location address (eg. Raleigh,San Francisco). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||Raleigh,San Francisco). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||Raleigh,San Francisco). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="Comma-delimited list of cities to filter results on location address (eg. Raleigh,San Francisco). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||Raleigh,San Francisco). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||Raleigh,San Francisco). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_postal_codes: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of postal codes to filter results on location address (eg. 95945,95350). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||95945,95350). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||95945,95350). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="Comma-delimited list of postal codes to filter results on location address (eg. 95945,95350). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||95945,95350). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||95945,95350). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    ids: Annotated[Optional[StrictStr], Field(description="Comma-delimited list of unique identifiers (ids) for organization, service, location or service-at-location. Adding one or more values will programatically add a search filter. Only default operator values 'eq' (assert) and 'or' (join) are accepted for this parameter, and are automatically added.")] = Header(None, description="Comma-delimited list of unique identifiers (ids) for organization, service, location or service-at-location. Adding one or more values will programatically add a search filter. Only default operator values &#39;eq&#39; (assert) and &#39;or&#39; (join) are accepted for this parameter, and are automatically added."),
    token_apiKeyQuery: TokenModel = Security(
        get_token_apiKeyQuery
    ),
    token_apiKeyHeader: TokenModel = Security(
        get_token_apiKeyHeader
    ),
) -> SearchOutputDto:
    """Searches an index of NDP service at location records.     Records are returned in &#39;service-at-location&#39; format, with all services and locations of the organization. For more options, use the POST method.     The total number of records in the index matching the request is identified as \&quot;count\&quot; at the top of the response. The values set for each parameter are also returned within the request object at the top of the response, when &#39;resultsAdvanced&#39; is set to &#39;true&#39;.    Filter expressions can be applied to the GET and POST operations using parameters such as data owners, tags, taxonomy codes, service areas, and address. See parameter value descriptions for more information.    Note: A search that returns no results will have a status code of 204 or 404. A 204 status code is returned when the Advanced Results parameter value is   is to false. When set to true, a 404 NotFound status code is returned with the request input. Note that the request input may be programitically modified in certain scenarios. As an example,   when &#39;searchWithinLocationType&#39; is set to its default value &#39;unknown&#39;, the geocoding service will set the location type based on the location entered. Refer to the field description for more information.   A 500 ServerError response returns a tracking code that can be used internally to identify undocumented items and/or resolve unmanaged errors."""
    if not BaseKeywordApi.subclasses:
        raise HTTPException(status_code=500, detail="Not implemented")
    return await BaseKeywordApi.subclasses[0]().get_keyword_keywords_keywords_location_location(keywords, location, location_mode, distance, data_owners, tags_service, search_within_location_type, skip, size, search_mode, keyword_is_taxonomy_code, keyword_is_taxonomy_term, results_advanced, order_by_distance, taxonomy_terms, taxonomy_codes, target_terms, service_area_countries, service_area_states, service_area_counties, service_area_cities, service_area_postal_codes, address_countries, address_states, address_counties, address_cities, address_postal_codes, ids)


@router.post(
    "/keyword",
    responses={
        200: {"model": SearchOutputDto, "description": "OK"},
        400: {"description": "Bad Request"},
        403: {"description": "Forbidden"},
        404: {"model": SearchOutputDto, "description": "Not Found"},
        500: {"model": SearchOutputDto, "description": "Internal Server Error"},
    },
    tags=["Keyword"],
    summary="Search: Keywords",
    response_model_by_alias=True,
)
async def post_keyword(
    data_owners: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of data owners to filter search results. Adding one or more values will programatically add a search filter. If multiple data owners are applied (eg. 211ventura,211bayarea), a match on one or more data owners will result in a match (and resource returned). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||211ventura,211ayarea). See /filters/dataOwners on Filters API for a list of data owners.")] = Header(None, description="(admin use only) Comma-delimited list of data owners to filter search results. Adding one or more values will programatically add a search filter. If multiple data owners are applied (eg. 211ventura,211bayarea), a match on one or more data owners will result in a match (and resource returned). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||211ventura,211ayarea). See /filters/dataOwners on Filters API for a list of data owners."),
    taxonomy_codes: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of taxonomy codes to filter data on. Adding one or more values will programatically add a search filter. Multiple codes can be added, and wildcards are supported (eg. BD-1800\\*,PX-2300,HD-8000.1800* ). Create a wildcard by appending * to the end of the code, returning all children. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/taxonomy-terms-and-codes-assigned Filters API for a list of terms.")] = Header(None, description="(admin use only) Comma-delimited list of taxonomy codes to filter data on. Adding one or more values will programatically add a search filter. Multiple codes can be added, and wildcards are supported (eg. BD-1800\\*,PX-2300,HD-8000.1800* ). Create a wildcard by appending * to the end of the code, returning all children. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/taxonomy-terms-and-codes-assigned Filters API for a list of terms."),
    taxonomy_terms: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of taxonomy terms to filter data on. Adding one or more values will programatically add a search filter. Multiple terms can be added, and wildcards are supported (eg. Food\\*,Food Pantry ). Create a wildcard by appending * to the end of the term, returning all children. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||Food*,Food Pantry). If multiple terms are applied (eg. Food Pantry,Medical*), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/taxonomy-terms-assigned Filters API for a list of terms.")] = Header(None, description="(admin use only) Comma-delimited list of taxonomy terms to filter data on. Adding one or more values will programatically add a search filter. Multiple terms can be added, and wildcards are supported (eg. Food\\*,Food Pantry ). Create a wildcard by appending * to the end of the term, returning all children. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||Food*,Food Pantry). If multiple terms are applied (eg. Food Pantry,Medical*), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/taxonomy-terms-assigned Filters API for a list of terms."),
    target_terms: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of target terms to filter data on. A target term is a Y-level AIRS taxonomy term. Adding one or more values will programatically add a search filter. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/target-terms-assigned Filters API for a list of terms.")] = Header(None, description="(admin use only) Comma-delimited list of target terms to filter data on. A target term is a Y-level AIRS taxonomy term. Adding one or more values will programatically add a search filter. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||Older Adults,Women). If multiple terms are applied (eg. Older Adults,Women), a match on one or more terms will result in a match (and resource returned). To match on all terms, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/target-terms-assigned Filters API for a list of terms."),
    tags_service: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of tags to filter search results. Adding one or more values will programatically add a search filter. The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' (eg. ne,and||211ventura,211ayarea). If multiple tags are applied (eg. Kinship,Shelter), a match on one or more tags will result in a match (and resource returned). To match on all tags, set Assert operator value to 'eq' and Join operator value to 'and'. See /filters/tags on Filters API for a list of tags.")] = Header(None, description="(admin use only) Comma-delimited list of tags to filter search results. Adding one or more values will programatically add a search filter. The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; (eg. ne,and||211ventura,211ayarea). If multiple tags are applied (eg. Kinship,Shelter), a match on one or more tags will result in a match (and resource returned). To match on all tags, set Assert operator value to &#39;eq&#39; and Join operator value to &#39;and&#39;. See /filters/tags on Filters API for a list of tags."),
    skip: Annotated[Optional[StrictInt], Field(description="Format - int32. (admin use only) Number of results to skip. Used with Size to page results. Note that the total number of resources that match the search is returned with 'count' in the search results, if IncludeTotalCount is set to true.")] = Header(None, description="Format - int32. (admin use only) Number of results to skip. Used with Size to page results. Note that the total number of resources that match the search is returned with &#39;count&#39; in the search results, if IncludeTotalCount is set to true."),
    size: Annotated[Optional[StrictInt], Field(description="Format - int32. (admin use only) Number of results to be returned. Used with Skip to page results. Note that the total number of resources that match the search is returned with 'count' in the search results, if IncludeTotalCount is set to true.")] = Header(None, description="Format - int32. (admin use only) Number of results to be returned. Used with Skip to page results. Note that the total number of resources that match the search is returned with &#39;count&#39; in the search results, if IncludeTotalCount is set to true."),
    service_area_countries: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of countries (non-abbreviated format) to filter results on service area (eg. United States,Canada). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="(admin use only) Comma-delimited list of countries (non-abbreviated format) to filter results on service area (eg. United States,Canada). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_states: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of states (non-abbreviated format) to filter results on service area (eg. North Carolina,California).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="(admin use only) Comma-delimited list of states (non-abbreviated format) to filter results on service area (eg. North Carolina,California).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_counties: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of counties to filter results on service area (eg. Wake,Durham).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="(admin use only) Comma-delimited list of counties to filter results on service area (eg. Wake,Durham).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_cities: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of cities to filter results on service area (eg. Raleigh,San Francisco).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="(admin use only) Comma-delimited list of cities to filter results on service area (eg. Raleigh,San Francisco).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    service_area_postal_codes: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of postal codes to filter results on service area (eg. 12345,67890).  The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to 'or' Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas.")] = Header(None, description="(admin use only) Comma-delimited list of postal codes to filter results on service area (eg. 12345,67890).  The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada. (note: operator values joining multiple service area types is set by default to &#39;or&#39; Join operator and null Assert operator. Multiple service area type operator values can only be set in POST operation. See /filters/service-area-values on Filters API for a list of service areas."),
    address_countries: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of countries (non-abbreviated format) to filter results on location address (eg. United States,Canada). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||United States,Canada). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||United States,Canada). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="(admin use only) Comma-delimited list of countries (non-abbreviated format) to filter results on location address (eg. United States,Canada). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||United States,Canada). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||United States,Canada). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_states: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of states (abbreviated format) to filter results on location address (eg. NC,CA). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||NC,CA). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||NC,CA). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="(admin use only) Comma-delimited list of states (abbreviated format) to filter results on location address (eg. NC,CA). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||NC,CA). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||NC,CA). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_counties: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of counties to filter results on location address (eg. Wake,Durham). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||Wake,Durham). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||Wake,Durham). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="(admin use only) Comma-delimited list of counties to filter results on location address (eg. Wake,Durham). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||Wake,Durham). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||Wake,Durham). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_cities: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of cities to filter results on location address (eg. Raleigh,San Francisco). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||Raleigh,San Francisco). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||Raleigh,San Francisco). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="(admin use only) Comma-delimited list of cities to filter results on location address (eg. Raleigh,San Francisco). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||Raleigh,San Francisco). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||Raleigh,San Francisco). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    address_postal_codes: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of postal codes to filter results on location address (eg. 12345,67890). The 'eq' Assert operator and the 'or' Join operator are the default operator values. Assert operator value 'ne' can only be used with Join operator 'and' or null (eg. ne,and||12345,67890). Assert operator value 'eq' or null can only be used with Join operator 'or' (eg. eq,or||12345,67890). (note: operator values joining multiple address types is set by default to 'and' Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations.")] = Header(None, description="(admin use only) Comma-delimited list of postal codes to filter results on location address (eg. 12345,67890). The &#39;eq&#39; Assert operator and the &#39;or&#39; Join operator are the default operator values. Assert operator value &#39;ne&#39; can only be used with Join operator &#39;and&#39; or null (eg. ne,and||12345,67890). Assert operator value &#39;eq&#39; or null can only be used with Join operator &#39;or&#39; (eg. eq,or||12345,67890). (note: operator values joining multiple address types is set by default to &#39;and&#39; Join operator and null Assert operator. Multiple address type operator values can only be set in POST operation. See /filters/location-values on Filters API for a list of address locations."),
    ids: Annotated[Optional[StrictStr], Field(description="(admin use only) Comma-delimited list of unique identifiers (ids) for organization, service, location or service-at-location. Adding one or more values will programatically add a search filter. Default operator values: Assert = 'eq'; Join='or'. Only default operator values permitted (ie. Assert=eq;Join=or).")] = Header(None, description="(admin use only) Comma-delimited list of unique identifiers (ids) for organization, service, location or service-at-location. Adding one or more values will programatically add a search filter. Default operator values: Assert &#x3D; &#39;eq&#39;; Join&#x3D;&#39;or&#39;. Only default operator values permitted (ie. Assert&#x3D;eq;Join&#x3D;or)."),
    search_input_dto: Optional[SearchInputDto] = Body(None, description=""),
    token_apiKeyQuery: TokenModel = Security(
        get_token_apiKeyQuery
    ),
    token_apiKeyHeader: TokenModel = Security(
        get_token_apiKeyHeader
    ),
) -> SearchOutputDto:
    """Searches an index of NDP service at location records.     Records are returned in &#39;service-at-locationn&#39; format, with all services and locations of the organization.    The total number of records in the index matching the request is identified as \&quot;count\&quot; at the top of the response. The values set for each parameter are also returned within the request object at the top of the response, when &#39;resultsAdvanced&#39; is set to &#39;true&#39;.    Note: Active and Inactive organizations can be returned. Set the &#39;includeInactive&#39; filter to true to return both active and inactive records. Default value is set to &#39;false&#39;, returning only active records.     Note: A search that returns no results will have a status code of 204 or 404. A 204 status code is returned when the Advanced Results parameter value is   is to false. When set to true, a 404 NotFound status code is returned with the request input. Note that the request input may be programitically modified in certain scenarios. As an example,   when &#39;searchWithinLocationType&#39; is set to its default value &#39;unknown&#39;, the geocoding service will set the location type based on the location entered. Refer to the field description for more information.   A 500 ServerError response returns a tracking code that can be used internally to identify undocumented items and/or resolve unmanaged errors."""
    if not BaseKeywordApi.subclasses:
        raise HTTPException(status_code=500, detail="Not implemented")
    return await BaseKeywordApi.subclasses[0]().post_keyword(data_owners, taxonomy_codes, taxonomy_terms, target_terms, tags_service, skip, size, service_area_countries, service_area_states, service_area_counties, service_area_cities, service_area_postal_codes, address_countries, address_states, address_counties, address_cities, address_postal_codes, ids, search_input_dto)
