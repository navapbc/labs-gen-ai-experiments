# coding: utf-8

"""
    Search V2

    Returns service-at-location search results from the 211 National Data Platform's resource repository search index and values that can be used to filter search results.  A common use case for this API is to return a list of abbeviated service at location resources (i.e. search results) using the '/keyword' endpoint, then use values from within the search results to retrieve the details for a selected service-at-location resource using the 'query/service-at-location-details' endpoint on the Query V2 API.  The Search V2 API organizes operations into two categories:  * Search: returns a list of abbreviated service-at-location resources (i.e. search results) from a GET or POST request that can be configured to filter results using operation parameters, such as tags, service areas, taxonomy terms, etc. The Search operations can also be configured to return facets for targeting specific resources in downstream searches, selecting fields used for search, and setting the type of geographic search filter (e.g. filter results using the geographic boundary of a location or distance between the target and the service location). The Search operation supports two methods: GET and POST. The GET method is intended as a basic method compared to the POST method, providing a streamlined approach to searching resources. The POST method, although less simple to implement compared to the GET method, provides a more flexible and configurable approach to managing the request to, and response from the Search operation. Both methods include default values on several query string parameters and request body content fields. Refer to the documentation for more details   * Filters: provides values for parameters used in API operations. As an example, use the 'filters/tags' operation to retrieve a list of values that can be passed as an argument to the Tags filter on the 'search/keyword' POST operation.  HINT: Get started quickly... use the GET search/keyword API operation to retrieve search results, then pass the idServiceAtLocation value from a search result to the 'query/service-at-location-details' operation on the Query V2 API operation to return details on the service at location resource.   The Search API is often used with the Query V2 API and Suggest V2 API to implement use cases. The Query V2 API returns details of specific resources from the NDP resource repository, such as a service at location, service, location and organization. As an example, 'search/keyword' operation returns results with the ID for a service-at-location that that can be passed as an argument to the Query V2 API 'query/service-at-location-details' operation to retrieve the details, such as eligibility, hours of operation, etc, of a service-at-location resource. The Suggest V2 API provides type-ahead functionality that returns values for suggested keyword and location terms, scoped to parameter values such as 'dataOwners' and location types to enhance the user search experience and improve/narrow the quality of search results.   See the Query and Suggest API documentation for more details.  

    The version of the OpenAPI document: 1.0
    Contact: support@211.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OperatorValues(BaseModel):
    """
    Operator values add logic to filters. The two values are 'assert' and 'join'. Assert can be set to 'eq' or 'ne'. The default setting is 'eq'. If not set or set to null, the default value is applied programatically.  When assert is set to 'ne', search results exclude values set in the filter. As an example, if assert set to 'ne' for the filter 'dataOwner', search results will exclude records with the set dataOwner value.   Join can be set to 'and' or 'or'. The default setting is 'or'. When join is set to 'and', search results will exclude records that do not include all values for the targeted filter. As an example, if join set to 'and' for  taxonomy terms 'Food' and 'Shelter', search results will exclude all records that do not have a Food and a Shelter taxonomy term associated to the resource. Important! Most filters only support Join set to 'or'. This is   becuase most fields include only a single value, and requesting two matching values when only one is available will results in no resources being returned. Refer to the documentation for each filter field to learn more  about the options for assert and join on each field.
    """ # noqa: E501
    var_assert: Optional[StrictStr] = Field(default=None, alias="assert")
    join: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["assert", "join"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OperatorValues from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if var_assert (nullable) is None
        # and model_fields_set contains the field
        if self.var_assert is None and "var_assert" in self.model_fields_set:
            _dict['assert'] = None

        # set to None if join (nullable) is None
        # and model_fields_set contains the field
        if self.join is None and "join" in self.model_fields_set:
            _dict['join'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OperatorValues from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assert": obj.get("assert"),
            "join": obj.get("join")
        })
        return _obj


