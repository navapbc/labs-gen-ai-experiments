# coding: utf-8

"""
    Search V2

    Returns service-at-location search results from the 211 National Data Platform's resource repository search index and values that can be used to filter search results.  A common use case for this API is to return a list of abbeviated service at location resources (i.e. search results) using the '/keyword' endpoint, then use values from within the search results to retrieve the details for a selected service-at-location resource using the 'query/service-at-location-details' endpoint on the Query V2 API.  The Search V2 API organizes operations into two categories:  * Search: returns a list of abbreviated service-at-location resources (i.e. search results) from a GET or POST request that can be configured to filter results using operation parameters, such as tags, service areas, taxonomy terms, etc. The Search operations can also be configured to return facets for targeting specific resources in downstream searches, selecting fields used for search, and setting the type of geographic search filter (e.g. filter results using the geographic boundary of a location or distance between the target and the service location). The Search operation supports two methods: GET and POST. The GET method is intended as a basic method compared to the POST method, providing a streamlined approach to searching resources. The POST method, although less simple to implement compared to the GET method, provides a more flexible and configurable approach to managing the request to, and response from the Search operation. Both methods include default values on several query string parameters and request body content fields. Refer to the documentation for more details   * Filters: provides values for parameters used in API operations. As an example, use the 'filters/tags' operation to retrieve a list of values that can be passed as an argument to the Tags filter on the 'search/keyword' POST operation.  HINT: Get started quickly... use the GET search/keyword API operation to retrieve search results, then pass the idServiceAtLocation value from a search result to the 'query/service-at-location-details' operation on the Query V2 API operation to return details on the service at location resource.   The Search API is often used with the Query V2 API and Suggest V2 API to implement use cases. The Query V2 API returns details of specific resources from the NDP resource repository, such as a service at location, service, location and organization. As an example, 'search/keyword' operation returns results with the ID for a service-at-location that that can be passed as an argument to the Query V2 API 'query/service-at-location-details' operation to retrieve the details, such as eligibility, hours of operation, etc, of a service-at-location resource. The Suggest V2 API provides type-ahead functionality that returns values for suggested keyword and location terms, scoped to parameter values such as 'dataOwners' and location types to enhance the user search experience and improve/narrow the quality of search results.   See the Query and Suggest API documentation for more details.  

    The version of the OpenAPI document: 1.0
    Contact: support@211.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class LocationModeDto(str, Enum):
    """
    To search for resources 'near' the location, set LocationMode to 'Near', and 'Distance' to a value greater than 0.   This will return resources with service delivery locations within the chosen distance from the geographic center (latitude/longitude) of the chosen location.  To search for resources 'within' the geographic boundary of the location, set LocationMode to 'Within'.   This will return resources within the boundary (polygon of latitude/longitude values) of the chosen location.   To search for resources available within a service area (a geographic area that often defines eligibility for service), set LocationMode to 'Serving' or 'ServingOnly'.   ServingOnly returns resources available within the chosen location (ie. chosen service area). If SearchWithinLocationMode is set to 'Unknown' (the default value), the geographic location  type will be determined by the API (eg county, city, etc.). The search will then return resources for service areas that match both the type (eg. county) and the location (eg. Ventura).   LocationMode set to Serving differs from LocationMode set to ServingOnly. Serving return returns resources delivered within the selelect location and geography type, plus all  higher level service area boundaries. As an example, setting LocationMode to 'ServingOnly', Location to 'Ventura' and SearchWithinLocationType to 'County' will return all resources with a service area of Ventura County.   If LocationMode is set to 'Serving', resources with a service area of California and United States will also be returned, as Ventura is a service area within the higher   level service areas of California (state) and United States (country).  Notes: Distance is ignored when LocationMode is set to 'Within', 'Serving' and 'ServingOnly'. OrderByDistance is ignored when LocationMode is  set to 'Within'. Set 'ResultsAdvanced' to true to inspect programmatics changes made by the API to SearchWithinLocationType if left to default (ie. Unknown).
    """

    """
    allowed enum values
    """
    WITHIN = 'Within'
    NEAR = 'Near'
    SERVING = 'Serving'
    SERVINGONLY = 'ServingOnly'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of LocationModeDto from a JSON string"""
        return cls(json.loads(json_str))


